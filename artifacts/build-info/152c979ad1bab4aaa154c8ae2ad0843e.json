{"id":"152c979ad1bab4aaa154c8ae2ad0843e","_format":"hh-sol-build-info-1","solcVersion":"0.8.27","solcLongVersion":"0.8.27+commit.40a35a09","input":{"language":"Solidity","sources":{"@openzeppelin/contracts/access/Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"},"@openzeppelin/contracts/utils/Context.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"},"@openzeppelin/contracts/utils/cryptography/Hashes.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/cryptography/Hashes.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Library of standard hash functions.\n *\n * _Available since v5.1._\n */\nlibrary Hashes {\n    /**\n     * @dev Commutative Keccak256 hash of a sorted pair of bytes32. Frequently used when working with merkle proofs.\n     *\n     * NOTE: Equivalent to the `standardNodeHash` in our https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\n     */\n    function commutativeKeccak256(bytes32 a, bytes32 b) internal pure returns (bytes32) {\n        return a < b ? _efficientKeccak256(a, b) : _efficientKeccak256(b, a);\n    }\n\n    /**\n     * @dev Implementation of keccak256(abi.encode(a, b)) that doesn't allocate or expand memory.\n     */\n    function _efficientKeccak256(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\n        assembly (\"memory-safe\") {\n            mstore(0x00, a)\n            mstore(0x20, b)\n            value := keccak256(0x00, 0x40)\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/cryptography/MerkleProof.sol)\n// This file was procedurally generated from scripts/generate/templates/MerkleProof.js.\n\npragma solidity ^0.8.20;\n\nimport {Hashes} from \"./Hashes.sol\";\n\n/**\n * @dev These functions deal with verification of Merkle Tree proofs.\n *\n * The tree and the proofs can be generated using our\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\n * You will find a quickstart guide in the readme.\n *\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\n * hashing, or use a hash function other than keccak256 for hashing leaves.\n * This is because the concatenation of a sorted pair of internal nodes in\n * the Merkle tree could be reinterpreted as a leaf value.\n * OpenZeppelin's JavaScript library generates Merkle trees that are safe\n * against this attack out of the box.\n *\n * IMPORTANT: Consider memory side-effects when using custom hashing functions\n * that access memory in an unsafe way.\n *\n * NOTE: This library supports proof verification for merkle trees built using\n * custom _commutative_ hashing functions (i.e. `H(a, b) == H(b, a)`). Proving\n * leaf inclusion in trees built using non-commutative hashing functions requires\n * additional logic that is not supported by this library.\n */\nlibrary MerkleProof {\n    /**\n     *@dev The multiproof provided is not valid.\n     */\n    error MerkleProofInvalidMultiproof();\n\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     *\n     * This version handles proofs in memory with the default hashing function.\n     */\n    function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\n        return processProof(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leaves & pre-images are assumed to be sorted.\n     *\n     * This version handles proofs in memory with the default hashing function.\n     */\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = Hashes.commutativeKeccak256(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     *\n     * This version handles proofs in memory with a custom hashing function.\n     */\n    function verify(\n        bytes32[] memory proof,\n        bytes32 root,\n        bytes32 leaf,\n        function(bytes32, bytes32) view returns (bytes32) hasher\n    ) internal view returns (bool) {\n        return processProof(proof, leaf, hasher) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leaves & pre-images are assumed to be sorted.\n     *\n     * This version handles proofs in memory with a custom hashing function.\n     */\n    function processProof(\n        bytes32[] memory proof,\n        bytes32 leaf,\n        function(bytes32, bytes32) view returns (bytes32) hasher\n    ) internal view returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = hasher(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     *\n     * This version handles proofs in calldata with the default hashing function.\n     */\n    function verifyCalldata(bytes32[] calldata proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\n        return processProofCalldata(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leaves & pre-images are assumed to be sorted.\n     *\n     * This version handles proofs in calldata with the default hashing function.\n     */\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = Hashes.commutativeKeccak256(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     *\n     * This version handles proofs in calldata with a custom hashing function.\n     */\n    function verifyCalldata(\n        bytes32[] calldata proof,\n        bytes32 root,\n        bytes32 leaf,\n        function(bytes32, bytes32) view returns (bytes32) hasher\n    ) internal view returns (bool) {\n        return processProofCalldata(proof, leaf, hasher) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leaves & pre-images are assumed to be sorted.\n     *\n     * This version handles proofs in calldata with a custom hashing function.\n     */\n    function processProofCalldata(\n        bytes32[] calldata proof,\n        bytes32 leaf,\n        function(bytes32, bytes32) view returns (bytes32) hasher\n    ) internal view returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = hasher(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a Merkle tree defined by\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n     *\n     * This version handles multiproofs in memory with the default hashing function.\n     *\n     * CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * NOTE: Consider the case where `root == proof[0] && leaves.length == 0` as it will return `true`.\n     * The `leaves` must be validated independently. See {processMultiProof}.\n     */\n    function multiProofVerify(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProof(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n     * respectively.\n     *\n     * This version handles multiproofs in memory with the default hashing function.\n     *\n     * CAUTION: Not all Merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n     *\n     * NOTE: The _empty set_ (i.e. the case where `proof.length == 1 && leaves.length == 0`) is considered a no-op,\n     * and therefore a valid multiproof (i.e. it returns `proof[0]`). Consider disallowing this case if you're not\n     * validating the leaves elsewhere.\n     */\n    function processMultiProof(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the Merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 proofFlagsLen = proofFlags.length;\n\n        // Check proof validity.\n        if (leavesLen + proof.length != proofFlagsLen + 1) {\n            revert MerkleProofInvalidMultiproof();\n        }\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](proofFlagsLen);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value from the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < proofFlagsLen; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i]\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\n                : proof[proofPos++];\n            hashes[i] = Hashes.commutativeKeccak256(a, b);\n        }\n\n        if (proofFlagsLen > 0) {\n            if (proofPos != proof.length) {\n                revert MerkleProofInvalidMultiproof();\n            }\n            unchecked {\n                return hashes[proofFlagsLen - 1];\n            }\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    /**\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a Merkle tree defined by\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n     *\n     * This version handles multiproofs in memory with a custom hashing function.\n     *\n     * CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * NOTE: Consider the case where `root == proof[0] && leaves.length == 0` as it will return `true`.\n     * The `leaves` must be validated independently. See {processMultiProof}.\n     */\n    function multiProofVerify(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves,\n        function(bytes32, bytes32) view returns (bytes32) hasher\n    ) internal view returns (bool) {\n        return processMultiProof(proof, proofFlags, leaves, hasher) == root;\n    }\n\n    /**\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n     * respectively.\n     *\n     * This version handles multiproofs in memory with a custom hashing function.\n     *\n     * CAUTION: Not all Merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n     *\n     * NOTE: The _empty set_ (i.e. the case where `proof.length == 1 && leaves.length == 0`) is considered a no-op,\n     * and therefore a valid multiproof (i.e. it returns `proof[0]`). Consider disallowing this case if you're not\n     * validating the leaves elsewhere.\n     */\n    function processMultiProof(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32[] memory leaves,\n        function(bytes32, bytes32) view returns (bytes32) hasher\n    ) internal view returns (bytes32 merkleRoot) {\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the Merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 proofFlagsLen = proofFlags.length;\n\n        // Check proof validity.\n        if (leavesLen + proof.length != proofFlagsLen + 1) {\n            revert MerkleProofInvalidMultiproof();\n        }\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](proofFlagsLen);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value from the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < proofFlagsLen; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i]\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\n                : proof[proofPos++];\n            hashes[i] = hasher(a, b);\n        }\n\n        if (proofFlagsLen > 0) {\n            if (proofPos != proof.length) {\n                revert MerkleProofInvalidMultiproof();\n            }\n            unchecked {\n                return hashes[proofFlagsLen - 1];\n            }\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    /**\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a Merkle tree defined by\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n     *\n     * This version handles multiproofs in calldata with the default hashing function.\n     *\n     * CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * NOTE: Consider the case where `root == proof[0] && leaves.length == 0` as it will return `true`.\n     * The `leaves` must be validated independently. See {processMultiProofCalldata}.\n     */\n    function multiProofVerifyCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n     * respectively.\n     *\n     * This version handles multiproofs in calldata with the default hashing function.\n     *\n     * CAUTION: Not all Merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n     *\n     * NOTE: The _empty set_ (i.e. the case where `proof.length == 1 && leaves.length == 0`) is considered a no-op,\n     * and therefore a valid multiproof (i.e. it returns `proof[0]`). Consider disallowing this case if you're not\n     * validating the leaves elsewhere.\n     */\n    function processMultiProofCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the Merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 proofFlagsLen = proofFlags.length;\n\n        // Check proof validity.\n        if (leavesLen + proof.length != proofFlagsLen + 1) {\n            revert MerkleProofInvalidMultiproof();\n        }\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](proofFlagsLen);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value from the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < proofFlagsLen; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i]\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\n                : proof[proofPos++];\n            hashes[i] = Hashes.commutativeKeccak256(a, b);\n        }\n\n        if (proofFlagsLen > 0) {\n            if (proofPos != proof.length) {\n                revert MerkleProofInvalidMultiproof();\n            }\n            unchecked {\n                return hashes[proofFlagsLen - 1];\n            }\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    /**\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a Merkle tree defined by\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n     *\n     * This version handles multiproofs in calldata with a custom hashing function.\n     *\n     * CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * NOTE: Consider the case where `root == proof[0] && leaves.length == 0` as it will return `true`.\n     * The `leaves` must be validated independently. See {processMultiProofCalldata}.\n     */\n    function multiProofVerifyCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves,\n        function(bytes32, bytes32) view returns (bytes32) hasher\n    ) internal view returns (bool) {\n        return processMultiProofCalldata(proof, proofFlags, leaves, hasher) == root;\n    }\n\n    /**\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n     * respectively.\n     *\n     * This version handles multiproofs in calldata with a custom hashing function.\n     *\n     * CAUTION: Not all Merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n     *\n     * NOTE: The _empty set_ (i.e. the case where `proof.length == 1 && leaves.length == 0`) is considered a no-op,\n     * and therefore a valid multiproof (i.e. it returns `proof[0]`). Consider disallowing this case if you're not\n     * validating the leaves elsewhere.\n     */\n    function processMultiProofCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32[] memory leaves,\n        function(bytes32, bytes32) view returns (bytes32) hasher\n    ) internal view returns (bytes32 merkleRoot) {\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the Merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 proofFlagsLen = proofFlags.length;\n\n        // Check proof validity.\n        if (leavesLen + proof.length != proofFlagsLen + 1) {\n            revert MerkleProofInvalidMultiproof();\n        }\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](proofFlagsLen);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value from the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < proofFlagsLen; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i]\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\n                : proof[proofPos++];\n            hashes[i] = hasher(a, b);\n        }\n\n        if (proofFlagsLen > 0) {\n            if (proofPos != proof.length) {\n                revert MerkleProofInvalidMultiproof();\n            }\n            unchecked {\n                return hashes[proofFlagsLen - 1];\n            }\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n}\n"},"contracts/MerkleProofVerification.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.27;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\";\r\n\r\ncontract MerkleProofVerification is Ownable {\r\n    // Variable to store the Merkle root\r\n    bytes32 public merkleRoot;\r\n\r\n    // Constructor that passes msg.sender to the Ownable constructor\r\n    constructor() Ownable(msg.sender) {\r\n        // Initialization logic if needed\r\n    }\r\n\r\n    // Function to set the Merkle root (only the owner can call this function)\r\n    function setMerkleRoot(bytes32 _merkleRoot) public onlyOwner {\r\n        merkleRoot = _merkleRoot;\r\n    }\r\n\r\n    // Function to verify whether a transaction hash is in the Merkle tree\r\n    function verifyTransactionInclusion(\r\n        bytes32[] memory proof,  // Merkle proof provided by the user\r\n        bytes32 leaf             // Transaction hash to verify (leaf node)\r\n    ) public view returns (bool) {\r\n        return MerkleProof.verify(proof, merkleRoot, leaf);\r\n    }\r\n}"}},"settings":{"evmVersion":"paris","optimizer":{"enabled":false,"runs":200},"outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata"],"":["ast"]}}}},"output":{"sources":{"@openzeppelin/contracts/access/Ownable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/access/Ownable.sol","exportedSymbols":{"Context":[177],"Ownable":[147]},"id":148,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"102:24:0"},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"../utils/Context.sol","id":3,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":148,"sourceUnit":178,"src":"128:45:0","symbolAliases":[{"foreign":{"id":2,"name":"Context","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":177,"src":"136:7:0","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":5,"name":"Context","nameLocations":["692:7:0"],"nodeType":"IdentifierPath","referencedDeclaration":177,"src":"692:7:0"},"id":6,"nodeType":"InheritanceSpecifier","src":"692:7:0"}],"canonicalName":"Ownable","contractDependencies":[],"contractKind":"contract","documentation":{"id":4,"nodeType":"StructuredDocumentation","src":"175:487:0","text":" @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n The initial owner is set to the address provided by the deployer. This can\n later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."},"fullyImplemented":true,"id":147,"linearizedBaseContracts":[147,177],"name":"Ownable","nameLocation":"681:7:0","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":8,"mutability":"mutable","name":"_owner","nameLocation":"722:6:0","nodeType":"VariableDeclaration","scope":147,"src":"706:22:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7,"name":"address","nodeType":"ElementaryTypeName","src":"706:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"documentation":{"id":9,"nodeType":"StructuredDocumentation","src":"735:85:0","text":" @dev The caller account is not authorized to perform an operation."},"errorSelector":"118cdaa7","id":13,"name":"OwnableUnauthorizedAccount","nameLocation":"831:26:0","nodeType":"ErrorDefinition","parameters":{"id":12,"nodeType":"ParameterList","parameters":[{"constant":false,"id":11,"mutability":"mutable","name":"account","nameLocation":"866:7:0","nodeType":"VariableDeclaration","scope":13,"src":"858:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":10,"name":"address","nodeType":"ElementaryTypeName","src":"858:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"857:17:0"},"src":"825:50:0"},{"documentation":{"id":14,"nodeType":"StructuredDocumentation","src":"881:82:0","text":" @dev The owner is not a valid owner account. (eg. `address(0)`)"},"errorSelector":"1e4fbdf7","id":18,"name":"OwnableInvalidOwner","nameLocation":"974:19:0","nodeType":"ErrorDefinition","parameters":{"id":17,"nodeType":"ParameterList","parameters":[{"constant":false,"id":16,"mutability":"mutable","name":"owner","nameLocation":"1002:5:0","nodeType":"VariableDeclaration","scope":18,"src":"994:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":15,"name":"address","nodeType":"ElementaryTypeName","src":"994:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"993:15:0"},"src":"968:41:0"},{"anonymous":false,"eventSelector":"8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0","id":24,"name":"OwnershipTransferred","nameLocation":"1021:20:0","nodeType":"EventDefinition","parameters":{"id":23,"nodeType":"ParameterList","parameters":[{"constant":false,"id":20,"indexed":true,"mutability":"mutable","name":"previousOwner","nameLocation":"1058:13:0","nodeType":"VariableDeclaration","scope":24,"src":"1042:29:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":19,"name":"address","nodeType":"ElementaryTypeName","src":"1042:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":22,"indexed":true,"mutability":"mutable","name":"newOwner","nameLocation":"1089:8:0","nodeType":"VariableDeclaration","scope":24,"src":"1073:24:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":21,"name":"address","nodeType":"ElementaryTypeName","src":"1073:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1041:57:0"},"src":"1015:84:0"},{"body":{"id":49,"nodeType":"Block","src":"1259:153:0","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":35,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":30,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":27,"src":"1273:12:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":33,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1297:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":32,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1289:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":31,"name":"address","nodeType":"ElementaryTypeName","src":"1289:7:0","typeDescriptions":{}}},"id":34,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1289:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1273:26:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":44,"nodeType":"IfStatement","src":"1269:95:0","trueBody":{"id":43,"nodeType":"Block","src":"1301:63:0","statements":[{"errorCall":{"arguments":[{"arguments":[{"hexValue":"30","id":39,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1350:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":38,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1342:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":37,"name":"address","nodeType":"ElementaryTypeName","src":"1342:7:0","typeDescriptions":{}}},"id":40,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1342:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":36,"name":"OwnableInvalidOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":18,"src":"1322:19:0","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$_t_error_$","typeString":"function (address) pure returns (error)"}},"id":41,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1322:31:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":42,"nodeType":"RevertStatement","src":"1315:38:0"}]}},{"expression":{"arguments":[{"id":46,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":27,"src":"1392:12:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":45,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":146,"src":"1373:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":47,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1373:32:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":48,"nodeType":"ExpressionStatement","src":"1373:32:0"}]},"documentation":{"id":25,"nodeType":"StructuredDocumentation","src":"1105:115:0","text":" @dev Initializes the contract setting the address provided by the deployer as the initial owner."},"id":50,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":28,"nodeType":"ParameterList","parameters":[{"constant":false,"id":27,"mutability":"mutable","name":"initialOwner","nameLocation":"1245:12:0","nodeType":"VariableDeclaration","scope":50,"src":"1237:20:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":26,"name":"address","nodeType":"ElementaryTypeName","src":"1237:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1236:22:0"},"returnParameters":{"id":29,"nodeType":"ParameterList","parameters":[],"src":"1259:0:0"},"scope":147,"src":"1225:187:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":57,"nodeType":"Block","src":"1521:41:0","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":53,"name":"_checkOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":84,"src":"1531:11:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$__$","typeString":"function () view"}},"id":54,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1531:13:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":55,"nodeType":"ExpressionStatement","src":"1531:13:0"},{"id":56,"nodeType":"PlaceholderStatement","src":"1554:1:0"}]},"documentation":{"id":51,"nodeType":"StructuredDocumentation","src":"1418:77:0","text":" @dev Throws if called by any account other than the owner."},"id":58,"name":"onlyOwner","nameLocation":"1509:9:0","nodeType":"ModifierDefinition","parameters":{"id":52,"nodeType":"ParameterList","parameters":[],"src":"1518:2:0"},"src":"1500:62:0","virtual":false,"visibility":"internal"},{"body":{"id":66,"nodeType":"Block","src":"1693:30:0","statements":[{"expression":{"id":64,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8,"src":"1710:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":63,"id":65,"nodeType":"Return","src":"1703:13:0"}]},"documentation":{"id":59,"nodeType":"StructuredDocumentation","src":"1568:65:0","text":" @dev Returns the address of the current owner."},"functionSelector":"8da5cb5b","id":67,"implemented":true,"kind":"function","modifiers":[],"name":"owner","nameLocation":"1647:5:0","nodeType":"FunctionDefinition","parameters":{"id":60,"nodeType":"ParameterList","parameters":[],"src":"1652:2:0"},"returnParameters":{"id":63,"nodeType":"ParameterList","parameters":[{"constant":false,"id":62,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":67,"src":"1684:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":61,"name":"address","nodeType":"ElementaryTypeName","src":"1684:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1683:9:0"},"scope":147,"src":"1638:85:0","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":83,"nodeType":"Block","src":"1841:117:0","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":75,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":71,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":67,"src":"1855:5:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":72,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1855:7:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":73,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":159,"src":"1866:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":74,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1866:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1855:23:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":82,"nodeType":"IfStatement","src":"1851:101:0","trueBody":{"id":81,"nodeType":"Block","src":"1880:72:0","statements":[{"errorCall":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":77,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":159,"src":"1928:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":78,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1928:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":76,"name":"OwnableUnauthorizedAccount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":13,"src":"1901:26:0","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$_t_error_$","typeString":"function (address) pure returns (error)"}},"id":79,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1901:40:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":80,"nodeType":"RevertStatement","src":"1894:47:0"}]}}]},"documentation":{"id":68,"nodeType":"StructuredDocumentation","src":"1729:62:0","text":" @dev Throws if the sender is not the owner."},"id":84,"implemented":true,"kind":"function","modifiers":[],"name":"_checkOwner","nameLocation":"1805:11:0","nodeType":"FunctionDefinition","parameters":{"id":69,"nodeType":"ParameterList","parameters":[],"src":"1816:2:0"},"returnParameters":{"id":70,"nodeType":"ParameterList","parameters":[],"src":"1841:0:0"},"scope":147,"src":"1796:162:0","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":97,"nodeType":"Block","src":"2347:47:0","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":93,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2384:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":92,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2376:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":91,"name":"address","nodeType":"ElementaryTypeName","src":"2376:7:0","typeDescriptions":{}}},"id":94,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2376:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":90,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":146,"src":"2357:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":95,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2357:30:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":96,"nodeType":"ExpressionStatement","src":"2357:30:0"}]},"documentation":{"id":85,"nodeType":"StructuredDocumentation","src":"1964:324:0","text":" @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby disabling any functionality that is only available to the owner."},"functionSelector":"715018a6","id":98,"implemented":true,"kind":"function","modifiers":[{"id":88,"kind":"modifierInvocation","modifierName":{"id":87,"name":"onlyOwner","nameLocations":["2337:9:0"],"nodeType":"IdentifierPath","referencedDeclaration":58,"src":"2337:9:0"},"nodeType":"ModifierInvocation","src":"2337:9:0"}],"name":"renounceOwnership","nameLocation":"2302:17:0","nodeType":"FunctionDefinition","parameters":{"id":86,"nodeType":"ParameterList","parameters":[],"src":"2319:2:0"},"returnParameters":{"id":89,"nodeType":"ParameterList","parameters":[],"src":"2347:0:0"},"scope":147,"src":"2293:101:0","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":125,"nodeType":"Block","src":"2613:145:0","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":111,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":106,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":101,"src":"2627:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":109,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2647:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":108,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2639:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":107,"name":"address","nodeType":"ElementaryTypeName","src":"2639:7:0","typeDescriptions":{}}},"id":110,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2639:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2627:22:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":120,"nodeType":"IfStatement","src":"2623:91:0","trueBody":{"id":119,"nodeType":"Block","src":"2651:63:0","statements":[{"errorCall":{"arguments":[{"arguments":[{"hexValue":"30","id":115,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2700:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":114,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2692:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":113,"name":"address","nodeType":"ElementaryTypeName","src":"2692:7:0","typeDescriptions":{}}},"id":116,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2692:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":112,"name":"OwnableInvalidOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":18,"src":"2672:19:0","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$_t_error_$","typeString":"function (address) pure returns (error)"}},"id":117,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2672:31:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":118,"nodeType":"RevertStatement","src":"2665:38:0"}]}},{"expression":{"arguments":[{"id":122,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":101,"src":"2742:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":121,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":146,"src":"2723:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":123,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2723:28:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":124,"nodeType":"ExpressionStatement","src":"2723:28:0"}]},"documentation":{"id":99,"nodeType":"StructuredDocumentation","src":"2400:138:0","text":" @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."},"functionSelector":"f2fde38b","id":126,"implemented":true,"kind":"function","modifiers":[{"id":104,"kind":"modifierInvocation","modifierName":{"id":103,"name":"onlyOwner","nameLocations":["2603:9:0"],"nodeType":"IdentifierPath","referencedDeclaration":58,"src":"2603:9:0"},"nodeType":"ModifierInvocation","src":"2603:9:0"}],"name":"transferOwnership","nameLocation":"2552:17:0","nodeType":"FunctionDefinition","parameters":{"id":102,"nodeType":"ParameterList","parameters":[{"constant":false,"id":101,"mutability":"mutable","name":"newOwner","nameLocation":"2578:8:0","nodeType":"VariableDeclaration","scope":126,"src":"2570:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":100,"name":"address","nodeType":"ElementaryTypeName","src":"2570:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2569:18:0"},"returnParameters":{"id":105,"nodeType":"ParameterList","parameters":[],"src":"2613:0:0"},"scope":147,"src":"2543:215:0","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":145,"nodeType":"Block","src":"2975:124:0","statements":[{"assignments":[133],"declarations":[{"constant":false,"id":133,"mutability":"mutable","name":"oldOwner","nameLocation":"2993:8:0","nodeType":"VariableDeclaration","scope":145,"src":"2985:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":132,"name":"address","nodeType":"ElementaryTypeName","src":"2985:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":135,"initialValue":{"id":134,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8,"src":"3004:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"2985:25:0"},{"expression":{"id":138,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":136,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8,"src":"3020:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":137,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":129,"src":"3029:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3020:17:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":139,"nodeType":"ExpressionStatement","src":"3020:17:0"},{"eventCall":{"arguments":[{"id":141,"name":"oldOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":133,"src":"3073:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":142,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":129,"src":"3083:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":140,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":24,"src":"3052:20:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":143,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3052:40:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":144,"nodeType":"EmitStatement","src":"3047:45:0"}]},"documentation":{"id":127,"nodeType":"StructuredDocumentation","src":"2764:143:0","text":" @dev Transfers ownership of the contract to a new account (`newOwner`).\n Internal function without access restriction."},"id":146,"implemented":true,"kind":"function","modifiers":[],"name":"_transferOwnership","nameLocation":"2921:18:0","nodeType":"FunctionDefinition","parameters":{"id":130,"nodeType":"ParameterList","parameters":[{"constant":false,"id":129,"mutability":"mutable","name":"newOwner","nameLocation":"2948:8:0","nodeType":"VariableDeclaration","scope":146,"src":"2940:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":128,"name":"address","nodeType":"ElementaryTypeName","src":"2940:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2939:18:0"},"returnParameters":{"id":131,"nodeType":"ParameterList","parameters":[],"src":"2975:0:0"},"scope":147,"src":"2912:187:0","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":148,"src":"663:2438:0","usedErrors":[13,18],"usedEvents":[24]}],"src":"102:3000:0"},"id":0},"@openzeppelin/contracts/utils/Context.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","exportedSymbols":{"Context":[177]},"id":178,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":149,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"101:24:1"},{"abstract":true,"baseContracts":[],"canonicalName":"Context","contractDependencies":[],"contractKind":"contract","documentation":{"id":150,"nodeType":"StructuredDocumentation","src":"127:496:1","text":" @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."},"fullyImplemented":true,"id":177,"linearizedBaseContracts":[177],"name":"Context","nameLocation":"642:7:1","nodeType":"ContractDefinition","nodes":[{"body":{"id":158,"nodeType":"Block","src":"718:34:1","statements":[{"expression":{"expression":{"id":155,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"735:3:1","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":156,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"739:6:1","memberName":"sender","nodeType":"MemberAccess","src":"735:10:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":154,"id":157,"nodeType":"Return","src":"728:17:1"}]},"id":159,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"665:10:1","nodeType":"FunctionDefinition","parameters":{"id":151,"nodeType":"ParameterList","parameters":[],"src":"675:2:1"},"returnParameters":{"id":154,"nodeType":"ParameterList","parameters":[{"constant":false,"id":153,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":159,"src":"709:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":152,"name":"address","nodeType":"ElementaryTypeName","src":"709:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"708:9:1"},"scope":177,"src":"656:96:1","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":167,"nodeType":"Block","src":"825:32:1","statements":[{"expression":{"expression":{"id":164,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"842:3:1","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":165,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"846:4:1","memberName":"data","nodeType":"MemberAccess","src":"842:8:1","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":163,"id":166,"nodeType":"Return","src":"835:15:1"}]},"id":168,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"767:8:1","nodeType":"FunctionDefinition","parameters":{"id":160,"nodeType":"ParameterList","parameters":[],"src":"775:2:1"},"returnParameters":{"id":163,"nodeType":"ParameterList","parameters":[{"constant":false,"id":162,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":168,"src":"809:14:1","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":161,"name":"bytes","nodeType":"ElementaryTypeName","src":"809:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"808:16:1"},"scope":177,"src":"758:99:1","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":175,"nodeType":"Block","src":"935:25:1","statements":[{"expression":{"hexValue":"30","id":173,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"952:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":172,"id":174,"nodeType":"Return","src":"945:8:1"}]},"id":176,"implemented":true,"kind":"function","modifiers":[],"name":"_contextSuffixLength","nameLocation":"872:20:1","nodeType":"FunctionDefinition","parameters":{"id":169,"nodeType":"ParameterList","parameters":[],"src":"892:2:1"},"returnParameters":{"id":172,"nodeType":"ParameterList","parameters":[{"constant":false,"id":171,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":176,"src":"926:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":170,"name":"uint256","nodeType":"ElementaryTypeName","src":"926:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"925:9:1"},"scope":177,"src":"863:97:1","stateMutability":"view","virtual":true,"visibility":"internal"}],"scope":178,"src":"624:338:1","usedErrors":[],"usedEvents":[]}],"src":"101:862:1"},"id":1},"@openzeppelin/contracts/utils/cryptography/Hashes.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/cryptography/Hashes.sol","exportedSymbols":{"Hashes":[217]},"id":218,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":179,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"113:24:2"},{"abstract":false,"baseContracts":[],"canonicalName":"Hashes","contractDependencies":[],"contractKind":"library","documentation":{"id":180,"nodeType":"StructuredDocumentation","src":"139:81:2","text":" @dev Library of standard hash functions.\n _Available since v5.1._"},"fullyImplemented":true,"id":217,"linearizedBaseContracts":[217],"name":"Hashes","nameLocation":"229:6:2","nodeType":"ContractDefinition","nodes":[{"body":{"id":203,"nodeType":"Block","src":"588:85:2","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":192,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":190,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":183,"src":"605:1:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":191,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":185,"src":"609:1:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"605:5:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"arguments":[{"id":198,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":185,"src":"661:1:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":199,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":183,"src":"664:1:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":197,"name":"_efficientKeccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":216,"src":"641:19:2","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":200,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"641:25:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":201,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"605:61:2","trueExpression":{"arguments":[{"id":194,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":183,"src":"633:1:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":195,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":185,"src":"636:1:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":193,"name":"_efficientKeccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":216,"src":"613:19:2","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":196,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"613:25:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":189,"id":202,"nodeType":"Return","src":"598:68:2"}]},"documentation":{"id":181,"nodeType":"StructuredDocumentation","src":"242:257:2","text":" @dev Commutative Keccak256 hash of a sorted pair of bytes32. Frequently used when working with merkle proofs.\n NOTE: Equivalent to the `standardNodeHash` in our https://github.com/OpenZeppelin/merkle-tree[JavaScript library]."},"id":204,"implemented":true,"kind":"function","modifiers":[],"name":"commutativeKeccak256","nameLocation":"513:20:2","nodeType":"FunctionDefinition","parameters":{"id":186,"nodeType":"ParameterList","parameters":[{"constant":false,"id":183,"mutability":"mutable","name":"a","nameLocation":"542:1:2","nodeType":"VariableDeclaration","scope":204,"src":"534:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":182,"name":"bytes32","nodeType":"ElementaryTypeName","src":"534:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":185,"mutability":"mutable","name":"b","nameLocation":"553:1:2","nodeType":"VariableDeclaration","scope":204,"src":"545:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":184,"name":"bytes32","nodeType":"ElementaryTypeName","src":"545:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"533:22:2"},"returnParameters":{"id":189,"nodeType":"ParameterList","parameters":[{"constant":false,"id":188,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":204,"src":"579:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":187,"name":"bytes32","nodeType":"ElementaryTypeName","src":"579:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"578:9:2"},"scope":217,"src":"504:169:2","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":215,"nodeType":"Block","src":"881:151:2","statements":[{"AST":{"nativeSrc":"916:110:2","nodeType":"YulBlock","src":"916:110:2","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"937:4:2","nodeType":"YulLiteral","src":"937:4:2","type":"","value":"0x00"},{"name":"a","nativeSrc":"943:1:2","nodeType":"YulIdentifier","src":"943:1:2"}],"functionName":{"name":"mstore","nativeSrc":"930:6:2","nodeType":"YulIdentifier","src":"930:6:2"},"nativeSrc":"930:15:2","nodeType":"YulFunctionCall","src":"930:15:2"},"nativeSrc":"930:15:2","nodeType":"YulExpressionStatement","src":"930:15:2"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"965:4:2","nodeType":"YulLiteral","src":"965:4:2","type":"","value":"0x20"},{"name":"b","nativeSrc":"971:1:2","nodeType":"YulIdentifier","src":"971:1:2"}],"functionName":{"name":"mstore","nativeSrc":"958:6:2","nodeType":"YulIdentifier","src":"958:6:2"},"nativeSrc":"958:15:2","nodeType":"YulFunctionCall","src":"958:15:2"},"nativeSrc":"958:15:2","nodeType":"YulExpressionStatement","src":"958:15:2"},{"nativeSrc":"986:30:2","nodeType":"YulAssignment","src":"986:30:2","value":{"arguments":[{"kind":"number","nativeSrc":"1005:4:2","nodeType":"YulLiteral","src":"1005:4:2","type":"","value":"0x00"},{"kind":"number","nativeSrc":"1011:4:2","nodeType":"YulLiteral","src":"1011:4:2","type":"","value":"0x40"}],"functionName":{"name":"keccak256","nativeSrc":"995:9:2","nodeType":"YulIdentifier","src":"995:9:2"},"nativeSrc":"995:21:2","nodeType":"YulFunctionCall","src":"995:21:2"},"variableNames":[{"name":"value","nativeSrc":"986:5:2","nodeType":"YulIdentifier","src":"986:5:2"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":207,"isOffset":false,"isSlot":false,"src":"943:1:2","valueSize":1},{"declaration":209,"isOffset":false,"isSlot":false,"src":"971:1:2","valueSize":1},{"declaration":212,"isOffset":false,"isSlot":false,"src":"986:5:2","valueSize":1}],"flags":["memory-safe"],"id":214,"nodeType":"InlineAssembly","src":"891:135:2"}]},"documentation":{"id":205,"nodeType":"StructuredDocumentation","src":"679:109:2","text":" @dev Implementation of keccak256(abi.encode(a, b)) that doesn't allocate or expand memory."},"id":216,"implemented":true,"kind":"function","modifiers":[],"name":"_efficientKeccak256","nameLocation":"802:19:2","nodeType":"FunctionDefinition","parameters":{"id":210,"nodeType":"ParameterList","parameters":[{"constant":false,"id":207,"mutability":"mutable","name":"a","nameLocation":"830:1:2","nodeType":"VariableDeclaration","scope":216,"src":"822:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":206,"name":"bytes32","nodeType":"ElementaryTypeName","src":"822:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":209,"mutability":"mutable","name":"b","nameLocation":"841:1:2","nodeType":"VariableDeclaration","scope":216,"src":"833:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":208,"name":"bytes32","nodeType":"ElementaryTypeName","src":"833:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"821:22:2"},"returnParameters":{"id":213,"nodeType":"ParameterList","parameters":[{"constant":false,"id":212,"mutability":"mutable","name":"value","nameLocation":"874:5:2","nodeType":"VariableDeclaration","scope":216,"src":"866:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":211,"name":"bytes32","nodeType":"ElementaryTypeName","src":"866:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"865:15:2"},"scope":217,"src":"793:239:2","stateMutability":"pure","virtual":false,"visibility":"private"}],"scope":218,"src":"221:813:2","usedErrors":[],"usedEvents":[]}],"src":"113:922:2"},"id":2},"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol","exportedSymbols":{"Hashes":[217],"MerkleProof":[1290]},"id":1291,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":219,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"206:24:3"},{"absolutePath":"@openzeppelin/contracts/utils/cryptography/Hashes.sol","file":"./Hashes.sol","id":221,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1291,"sourceUnit":218,"src":"232:36:3","symbolAliases":[{"foreign":{"id":220,"name":"Hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":217,"src":"240:6:3","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"MerkleProof","contractDependencies":[],"contractKind":"library","documentation":{"id":222,"nodeType":"StructuredDocumentation","src":"270:1082:3","text":" @dev These functions deal with verification of Merkle Tree proofs.\n The tree and the proofs can be generated using our\n https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\n You will find a quickstart guide in the readme.\n WARNING: You should avoid using leaf values that are 64 bytes long prior to\n hashing, or use a hash function other than keccak256 for hashing leaves.\n This is because the concatenation of a sorted pair of internal nodes in\n the Merkle tree could be reinterpreted as a leaf value.\n OpenZeppelin's JavaScript library generates Merkle trees that are safe\n against this attack out of the box.\n IMPORTANT: Consider memory side-effects when using custom hashing functions\n that access memory in an unsafe way.\n NOTE: This library supports proof verification for merkle trees built using\n custom _commutative_ hashing functions (i.e. `H(a, b) == H(b, a)`). Proving\n leaf inclusion in trees built using non-commutative hashing functions requires\n additional logic that is not supported by this library."},"fullyImplemented":true,"id":1290,"linearizedBaseContracts":[1290],"name":"MerkleProof","nameLocation":"1361:11:3","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":223,"nodeType":"StructuredDocumentation","src":"1379:60:3","text":"@dev The multiproof provided is not valid."},"errorSelector":"35140492","id":225,"name":"MerkleProofInvalidMultiproof","nameLocation":"1450:28:3","nodeType":"ErrorDefinition","parameters":{"id":224,"nodeType":"ParameterList","parameters":[],"src":"1478:2:3"},"src":"1444:37:3"},{"body":{"id":245,"nodeType":"Block","src":"1999:57:3","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":243,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":239,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":229,"src":"2029:5:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},{"id":240,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":233,"src":"2036:4:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":238,"name":"processProof","nodeType":"Identifier","overloadedDeclarations":[287,369],"referencedDeclaration":287,"src":"2016:12:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32[] memory,bytes32) pure returns (bytes32)"}},"id":241,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2016:25:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":242,"name":"root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":231,"src":"2045:4:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"2016:33:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":237,"id":244,"nodeType":"Return","src":"2009:40:3"}]},"documentation":{"id":226,"nodeType":"StructuredDocumentation","src":"1487:410:3","text":" @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n defined by `root`. For this, a `proof` must be provided, containing\n sibling hashes on the branch from the leaf to the root of the tree. Each\n pair of leaves and each pair of pre-images are assumed to be sorted.\n This version handles proofs in memory with the default hashing function."},"id":246,"implemented":true,"kind":"function","modifiers":[],"name":"verify","nameLocation":"1911:6:3","nodeType":"FunctionDefinition","parameters":{"id":234,"nodeType":"ParameterList","parameters":[{"constant":false,"id":229,"mutability":"mutable","name":"proof","nameLocation":"1935:5:3","nodeType":"VariableDeclaration","scope":246,"src":"1918:22:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":227,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1918:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":228,"nodeType":"ArrayTypeName","src":"1918:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":231,"mutability":"mutable","name":"root","nameLocation":"1950:4:3","nodeType":"VariableDeclaration","scope":246,"src":"1942:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":230,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1942:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":233,"mutability":"mutable","name":"leaf","nameLocation":"1964:4:3","nodeType":"VariableDeclaration","scope":246,"src":"1956:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":232,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1956:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1917:52:3"},"returnParameters":{"id":237,"nodeType":"ParameterList","parameters":[{"constant":false,"id":236,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":246,"src":"1993:4:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":235,"name":"bool","nodeType":"ElementaryTypeName","src":"1993:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1992:6:3"},"scope":1290,"src":"1902:154:3","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":286,"nodeType":"Block","src":"2549:216:3","statements":[{"assignments":[258],"declarations":[{"constant":false,"id":258,"mutability":"mutable","name":"computedHash","nameLocation":"2567:12:3","nodeType":"VariableDeclaration","scope":286,"src":"2559:20:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":257,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2559:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":260,"initialValue":{"id":259,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":252,"src":"2582:4:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"2559:27:3"},{"body":{"id":282,"nodeType":"Block","src":"2639:91:3","statements":[{"expression":{"id":280,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":272,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":258,"src":"2653:12:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":275,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":258,"src":"2696:12:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"baseExpression":{"id":276,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":250,"src":"2710:5:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":278,"indexExpression":{"id":277,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":262,"src":"2716:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2710:8:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":273,"name":"Hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":217,"src":"2668:6:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Hashes_$217_$","typeString":"type(library Hashes)"}},"id":274,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2675:20:3","memberName":"commutativeKeccak256","nodeType":"MemberAccess","referencedDeclaration":204,"src":"2668:27:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":279,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2668:51:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"2653:66:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":281,"nodeType":"ExpressionStatement","src":"2653:66:3"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":268,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":265,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":262,"src":"2616:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":266,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":250,"src":"2620:5:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":267,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2626:6:3","memberName":"length","nodeType":"MemberAccess","src":"2620:12:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2616:16:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":283,"initializationExpression":{"assignments":[262],"declarations":[{"constant":false,"id":262,"mutability":"mutable","name":"i","nameLocation":"2609:1:3","nodeType":"VariableDeclaration","scope":283,"src":"2601:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":261,"name":"uint256","nodeType":"ElementaryTypeName","src":"2601:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":264,"initialValue":{"hexValue":"30","id":263,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2613:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"2601:13:3"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":270,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"2634:3:3","subExpression":{"id":269,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":262,"src":"2634:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":271,"nodeType":"ExpressionStatement","src":"2634:3:3"},"nodeType":"ForStatement","src":"2596:134:3"},{"expression":{"id":284,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":258,"src":"2746:12:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":256,"id":285,"nodeType":"Return","src":"2739:19:3"}]},"documentation":{"id":247,"nodeType":"StructuredDocumentation","src":"2062:390:3","text":" @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n hash matches the root of the tree. When processing the proof, the pairs\n of leaves & pre-images are assumed to be sorted.\n This version handles proofs in memory with the default hashing function."},"id":287,"implemented":true,"kind":"function","modifiers":[],"name":"processProof","nameLocation":"2466:12:3","nodeType":"FunctionDefinition","parameters":{"id":253,"nodeType":"ParameterList","parameters":[{"constant":false,"id":250,"mutability":"mutable","name":"proof","nameLocation":"2496:5:3","nodeType":"VariableDeclaration","scope":287,"src":"2479:22:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":248,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2479:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":249,"nodeType":"ArrayTypeName","src":"2479:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":252,"mutability":"mutable","name":"leaf","nameLocation":"2511:4:3","nodeType":"VariableDeclaration","scope":287,"src":"2503:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":251,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2503:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2478:38:3"},"returnParameters":{"id":256,"nodeType":"ParameterList","parameters":[{"constant":false,"id":255,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":287,"src":"2540:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":254,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2540:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2539:9:3"},"scope":1290,"src":"2457:308:3","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":318,"nodeType":"Block","src":"3376:65:3","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":316,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":311,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":291,"src":"3406:5:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},{"id":312,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":295,"src":"3413:4:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":313,"name":"hasher","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":305,"src":"3419:6:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"}],"id":310,"name":"processProof","nodeType":"Identifier","overloadedDeclarations":[287,369],"referencedDeclaration":369,"src":"3393:12:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_bytes32_$_t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$_$returns$_t_bytes32_$","typeString":"function (bytes32[] memory,bytes32,function (bytes32,bytes32) view returns (bytes32)) view returns (bytes32)"}},"id":314,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3393:33:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":315,"name":"root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":293,"src":"3430:4:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"3393:41:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":309,"id":317,"nodeType":"Return","src":"3386:48:3"}]},"documentation":{"id":288,"nodeType":"StructuredDocumentation","src":"2771:407:3","text":" @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n defined by `root`. For this, a `proof` must be provided, containing\n sibling hashes on the branch from the leaf to the root of the tree. Each\n pair of leaves and each pair of pre-images are assumed to be sorted.\n This version handles proofs in memory with a custom hashing function."},"id":319,"implemented":true,"kind":"function","modifiers":[],"name":"verify","nameLocation":"3192:6:3","nodeType":"FunctionDefinition","parameters":{"id":306,"nodeType":"ParameterList","parameters":[{"constant":false,"id":291,"mutability":"mutable","name":"proof","nameLocation":"3225:5:3","nodeType":"VariableDeclaration","scope":319,"src":"3208:22:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":289,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3208:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":290,"nodeType":"ArrayTypeName","src":"3208:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":293,"mutability":"mutable","name":"root","nameLocation":"3248:4:3","nodeType":"VariableDeclaration","scope":319,"src":"3240:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":292,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3240:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":295,"mutability":"mutable","name":"leaf","nameLocation":"3270:4:3","nodeType":"VariableDeclaration","scope":319,"src":"3262:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":294,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3262:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":305,"mutability":"mutable","name":"hasher","nameLocation":"3334:6:3","nodeType":"VariableDeclaration","scope":319,"src":"3284:56:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"},"typeName":{"id":304,"nodeType":"FunctionTypeName","parameterTypes":{"id":300,"nodeType":"ParameterList","parameters":[{"constant":false,"id":297,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":304,"src":"3293:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":296,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3293:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":299,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":304,"src":"3302:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":298,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3302:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3292:18:3"},"returnParameterTypes":{"id":303,"nodeType":"ParameterList","parameters":[{"constant":false,"id":302,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":304,"src":"3325:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":301,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3325:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3324:9:3"},"src":"3284:56:3","stateMutability":"view","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"},"visibility":"internal"},"visibility":"internal"}],"src":"3198:148:3"},"returnParameters":{"id":309,"nodeType":"ParameterList","parameters":[{"constant":false,"id":308,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":319,"src":"3370:4:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":307,"name":"bool","nodeType":"ElementaryTypeName","src":"3370:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3369:6:3"},"scope":1290,"src":"3183:258:3","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":368,"nodeType":"Block","src":"4019:195:3","statements":[{"assignments":[341],"declarations":[{"constant":false,"id":341,"mutability":"mutable","name":"computedHash","nameLocation":"4037:12:3","nodeType":"VariableDeclaration","scope":368,"src":"4029:20:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":340,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4029:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":343,"initialValue":{"id":342,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":325,"src":"4052:4:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"4029:27:3"},{"body":{"id":364,"nodeType":"Block","src":"4109:70:3","statements":[{"expression":{"id":362,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":355,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":341,"src":"4123:12:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":357,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":341,"src":"4145:12:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"baseExpression":{"id":358,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":323,"src":"4159:5:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":360,"indexExpression":{"id":359,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":345,"src":"4165:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4159:8:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":356,"name":"hasher","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":335,"src":"4138:6:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"}},"id":361,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4138:30:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"4123:45:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":363,"nodeType":"ExpressionStatement","src":"4123:45:3"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":351,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":348,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":345,"src":"4086:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":349,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":323,"src":"4090:5:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":350,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4096:6:3","memberName":"length","nodeType":"MemberAccess","src":"4090:12:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4086:16:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":365,"initializationExpression":{"assignments":[345],"declarations":[{"constant":false,"id":345,"mutability":"mutable","name":"i","nameLocation":"4079:1:3","nodeType":"VariableDeclaration","scope":365,"src":"4071:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":344,"name":"uint256","nodeType":"ElementaryTypeName","src":"4071:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":347,"initialValue":{"hexValue":"30","id":346,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4083:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"4071:13:3"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":353,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"4104:3:3","subExpression":{"id":352,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":345,"src":"4104:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":354,"nodeType":"ExpressionStatement","src":"4104:3:3"},"nodeType":"ForStatement","src":"4066:113:3"},{"expression":{"id":366,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":341,"src":"4195:12:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":339,"id":367,"nodeType":"Return","src":"4188:19:3"}]},"documentation":{"id":320,"nodeType":"StructuredDocumentation","src":"3447:387:3","text":" @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n hash matches the root of the tree. When processing the proof, the pairs\n of leaves & pre-images are assumed to be sorted.\n This version handles proofs in memory with a custom hashing function."},"id":369,"implemented":true,"kind":"function","modifiers":[],"name":"processProof","nameLocation":"3848:12:3","nodeType":"FunctionDefinition","parameters":{"id":336,"nodeType":"ParameterList","parameters":[{"constant":false,"id":323,"mutability":"mutable","name":"proof","nameLocation":"3887:5:3","nodeType":"VariableDeclaration","scope":369,"src":"3870:22:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":321,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3870:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":322,"nodeType":"ArrayTypeName","src":"3870:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":325,"mutability":"mutable","name":"leaf","nameLocation":"3910:4:3","nodeType":"VariableDeclaration","scope":369,"src":"3902:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":324,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3902:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":335,"mutability":"mutable","name":"hasher","nameLocation":"3974:6:3","nodeType":"VariableDeclaration","scope":369,"src":"3924:56:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"},"typeName":{"id":334,"nodeType":"FunctionTypeName","parameterTypes":{"id":330,"nodeType":"ParameterList","parameters":[{"constant":false,"id":327,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":334,"src":"3933:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":326,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3933:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":329,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":334,"src":"3942:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":328,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3942:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3932:18:3"},"returnParameterTypes":{"id":333,"nodeType":"ParameterList","parameters":[{"constant":false,"id":332,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":334,"src":"3965:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":331,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3965:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3964:9:3"},"src":"3924:56:3","stateMutability":"view","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"},"visibility":"internal"},"visibility":"internal"}],"src":"3860:126:3"},"returnParameters":{"id":339,"nodeType":"ParameterList","parameters":[{"constant":false,"id":338,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":369,"src":"4010:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":337,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4010:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4009:9:3"},"scope":1290,"src":"3839:375:3","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":389,"nodeType":"Block","src":"4744:65:3","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":387,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":383,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":373,"src":"4782:5:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},{"id":384,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":377,"src":"4789:4:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":382,"name":"processProofCalldata","nodeType":"Identifier","overloadedDeclarations":[431,513],"referencedDeclaration":431,"src":"4761:20:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_bytes32_$dyn_calldata_ptr_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32[] calldata,bytes32) pure returns (bytes32)"}},"id":385,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4761:33:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":386,"name":"root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":375,"src":"4798:4:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"4761:41:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":381,"id":388,"nodeType":"Return","src":"4754:48:3"}]},"documentation":{"id":370,"nodeType":"StructuredDocumentation","src":"4220:412:3","text":" @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n defined by `root`. For this, a `proof` must be provided, containing\n sibling hashes on the branch from the leaf to the root of the tree. Each\n pair of leaves and each pair of pre-images are assumed to be sorted.\n This version handles proofs in calldata with the default hashing function."},"id":390,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCalldata","nameLocation":"4646:14:3","nodeType":"FunctionDefinition","parameters":{"id":378,"nodeType":"ParameterList","parameters":[{"constant":false,"id":373,"mutability":"mutable","name":"proof","nameLocation":"4680:5:3","nodeType":"VariableDeclaration","scope":390,"src":"4661:24:3","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":371,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4661:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":372,"nodeType":"ArrayTypeName","src":"4661:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":375,"mutability":"mutable","name":"root","nameLocation":"4695:4:3","nodeType":"VariableDeclaration","scope":390,"src":"4687:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":374,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4687:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":377,"mutability":"mutable","name":"leaf","nameLocation":"4709:4:3","nodeType":"VariableDeclaration","scope":390,"src":"4701:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":376,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4701:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4660:54:3"},"returnParameters":{"id":381,"nodeType":"ParameterList","parameters":[{"constant":false,"id":380,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":390,"src":"4738:4:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":379,"name":"bool","nodeType":"ElementaryTypeName","src":"4738:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4737:6:3"},"scope":1290,"src":"4637:172:3","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":430,"nodeType":"Block","src":"5314:216:3","statements":[{"assignments":[402],"declarations":[{"constant":false,"id":402,"mutability":"mutable","name":"computedHash","nameLocation":"5332:12:3","nodeType":"VariableDeclaration","scope":430,"src":"5324:20:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":401,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5324:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":404,"initialValue":{"id":403,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":396,"src":"5347:4:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"5324:27:3"},{"body":{"id":426,"nodeType":"Block","src":"5404:91:3","statements":[{"expression":{"id":424,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":416,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":402,"src":"5418:12:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":419,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":402,"src":"5461:12:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"baseExpression":{"id":420,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":394,"src":"5475:5:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":422,"indexExpression":{"id":421,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":406,"src":"5481:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5475:8:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":417,"name":"Hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":217,"src":"5433:6:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Hashes_$217_$","typeString":"type(library Hashes)"}},"id":418,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5440:20:3","memberName":"commutativeKeccak256","nodeType":"MemberAccess","referencedDeclaration":204,"src":"5433:27:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":423,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5433:51:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"5418:66:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":425,"nodeType":"ExpressionStatement","src":"5418:66:3"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":412,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":409,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":406,"src":"5381:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":410,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":394,"src":"5385:5:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":411,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5391:6:3","memberName":"length","nodeType":"MemberAccess","src":"5385:12:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5381:16:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":427,"initializationExpression":{"assignments":[406],"declarations":[{"constant":false,"id":406,"mutability":"mutable","name":"i","nameLocation":"5374:1:3","nodeType":"VariableDeclaration","scope":427,"src":"5366:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":405,"name":"uint256","nodeType":"ElementaryTypeName","src":"5366:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":408,"initialValue":{"hexValue":"30","id":407,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5378:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"5366:13:3"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":414,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"5399:3:3","subExpression":{"id":413,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":406,"src":"5399:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":415,"nodeType":"ExpressionStatement","src":"5399:3:3"},"nodeType":"ForStatement","src":"5361:134:3"},{"expression":{"id":428,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":402,"src":"5511:12:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":400,"id":429,"nodeType":"Return","src":"5504:19:3"}]},"documentation":{"id":391,"nodeType":"StructuredDocumentation","src":"4815:392:3","text":" @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n hash matches the root of the tree. When processing the proof, the pairs\n of leaves & pre-images are assumed to be sorted.\n This version handles proofs in calldata with the default hashing function."},"id":431,"implemented":true,"kind":"function","modifiers":[],"name":"processProofCalldata","nameLocation":"5221:20:3","nodeType":"FunctionDefinition","parameters":{"id":397,"nodeType":"ParameterList","parameters":[{"constant":false,"id":394,"mutability":"mutable","name":"proof","nameLocation":"5261:5:3","nodeType":"VariableDeclaration","scope":431,"src":"5242:24:3","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":392,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5242:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":393,"nodeType":"ArrayTypeName","src":"5242:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":396,"mutability":"mutable","name":"leaf","nameLocation":"5276:4:3","nodeType":"VariableDeclaration","scope":431,"src":"5268:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":395,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5268:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"5241:40:3"},"returnParameters":{"id":400,"nodeType":"ParameterList","parameters":[{"constant":false,"id":399,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":431,"src":"5305:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":398,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5305:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"5304:9:3"},"scope":1290,"src":"5212:318:3","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":462,"nodeType":"Block","src":"6153:73:3","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":460,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":455,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":435,"src":"6191:5:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},{"id":456,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":439,"src":"6198:4:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":457,"name":"hasher","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":449,"src":"6204:6:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"}],"id":454,"name":"processProofCalldata","nodeType":"Identifier","overloadedDeclarations":[431,513],"referencedDeclaration":513,"src":"6170:20:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_array$_t_bytes32_$dyn_calldata_ptr_$_t_bytes32_$_t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$_$returns$_t_bytes32_$","typeString":"function (bytes32[] calldata,bytes32,function (bytes32,bytes32) view returns (bytes32)) view returns (bytes32)"}},"id":458,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6170:41:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":459,"name":"root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":437,"src":"6215:4:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"6170:49:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":453,"id":461,"nodeType":"Return","src":"6163:56:3"}]},"documentation":{"id":432,"nodeType":"StructuredDocumentation","src":"5536:409:3","text":" @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n defined by `root`. For this, a `proof` must be provided, containing\n sibling hashes on the branch from the leaf to the root of the tree. Each\n pair of leaves and each pair of pre-images are assumed to be sorted.\n This version handles proofs in calldata with a custom hashing function."},"id":463,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCalldata","nameLocation":"5959:14:3","nodeType":"FunctionDefinition","parameters":{"id":450,"nodeType":"ParameterList","parameters":[{"constant":false,"id":435,"mutability":"mutable","name":"proof","nameLocation":"6002:5:3","nodeType":"VariableDeclaration","scope":463,"src":"5983:24:3","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":433,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5983:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":434,"nodeType":"ArrayTypeName","src":"5983:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":437,"mutability":"mutable","name":"root","nameLocation":"6025:4:3","nodeType":"VariableDeclaration","scope":463,"src":"6017:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":436,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6017:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":439,"mutability":"mutable","name":"leaf","nameLocation":"6047:4:3","nodeType":"VariableDeclaration","scope":463,"src":"6039:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":438,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6039:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":449,"mutability":"mutable","name":"hasher","nameLocation":"6111:6:3","nodeType":"VariableDeclaration","scope":463,"src":"6061:56:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"},"typeName":{"id":448,"nodeType":"FunctionTypeName","parameterTypes":{"id":444,"nodeType":"ParameterList","parameters":[{"constant":false,"id":441,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":448,"src":"6070:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":440,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6070:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":443,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":448,"src":"6079:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":442,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6079:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6069:18:3"},"returnParameterTypes":{"id":447,"nodeType":"ParameterList","parameters":[{"constant":false,"id":446,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":448,"src":"6102:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":445,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6102:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6101:9:3"},"src":"6061:56:3","stateMutability":"view","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"},"visibility":"internal"},"visibility":"internal"}],"src":"5973:150:3"},"returnParameters":{"id":453,"nodeType":"ParameterList","parameters":[{"constant":false,"id":452,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":463,"src":"6147:4:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":451,"name":"bool","nodeType":"ElementaryTypeName","src":"6147:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6146:6:3"},"scope":1290,"src":"5950:276:3","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":512,"nodeType":"Block","src":"6816:195:3","statements":[{"assignments":[485],"declarations":[{"constant":false,"id":485,"mutability":"mutable","name":"computedHash","nameLocation":"6834:12:3","nodeType":"VariableDeclaration","scope":512,"src":"6826:20:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":484,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6826:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":487,"initialValue":{"id":486,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":469,"src":"6849:4:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"6826:27:3"},{"body":{"id":508,"nodeType":"Block","src":"6906:70:3","statements":[{"expression":{"id":506,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":499,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":485,"src":"6920:12:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":501,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":485,"src":"6942:12:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"baseExpression":{"id":502,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":467,"src":"6956:5:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":504,"indexExpression":{"id":503,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":489,"src":"6962:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6956:8:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":500,"name":"hasher","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":479,"src":"6935:6:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"}},"id":505,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6935:30:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"6920:45:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":507,"nodeType":"ExpressionStatement","src":"6920:45:3"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":495,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":492,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":489,"src":"6883:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":493,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":467,"src":"6887:5:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":494,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6893:6:3","memberName":"length","nodeType":"MemberAccess","src":"6887:12:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6883:16:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":509,"initializationExpression":{"assignments":[489],"declarations":[{"constant":false,"id":489,"mutability":"mutable","name":"i","nameLocation":"6876:1:3","nodeType":"VariableDeclaration","scope":509,"src":"6868:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":488,"name":"uint256","nodeType":"ElementaryTypeName","src":"6868:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":491,"initialValue":{"hexValue":"30","id":490,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6880:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"6868:13:3"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":497,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"6901:3:3","subExpression":{"id":496,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":489,"src":"6901:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":498,"nodeType":"ExpressionStatement","src":"6901:3:3"},"nodeType":"ForStatement","src":"6863:113:3"},{"expression":{"id":510,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":485,"src":"6992:12:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":483,"id":511,"nodeType":"Return","src":"6985:19:3"}]},"documentation":{"id":464,"nodeType":"StructuredDocumentation","src":"6232:389:3","text":" @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n hash matches the root of the tree. When processing the proof, the pairs\n of leaves & pre-images are assumed to be sorted.\n This version handles proofs in calldata with a custom hashing function."},"id":513,"implemented":true,"kind":"function","modifiers":[],"name":"processProofCalldata","nameLocation":"6635:20:3","nodeType":"FunctionDefinition","parameters":{"id":480,"nodeType":"ParameterList","parameters":[{"constant":false,"id":467,"mutability":"mutable","name":"proof","nameLocation":"6684:5:3","nodeType":"VariableDeclaration","scope":513,"src":"6665:24:3","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":465,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6665:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":466,"nodeType":"ArrayTypeName","src":"6665:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":469,"mutability":"mutable","name":"leaf","nameLocation":"6707:4:3","nodeType":"VariableDeclaration","scope":513,"src":"6699:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":468,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6699:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":479,"mutability":"mutable","name":"hasher","nameLocation":"6771:6:3","nodeType":"VariableDeclaration","scope":513,"src":"6721:56:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"},"typeName":{"id":478,"nodeType":"FunctionTypeName","parameterTypes":{"id":474,"nodeType":"ParameterList","parameters":[{"constant":false,"id":471,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":478,"src":"6730:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":470,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6730:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":473,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":478,"src":"6739:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":472,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6739:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6729:18:3"},"returnParameterTypes":{"id":477,"nodeType":"ParameterList","parameters":[{"constant":false,"id":476,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":478,"src":"6762:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":475,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6762:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6761:9:3"},"src":"6721:56:3","stateMutability":"view","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"},"visibility":"internal"},"visibility":"internal"}],"src":"6655:128:3"},"returnParameters":{"id":483,"nodeType":"ParameterList","parameters":[{"constant":false,"id":482,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":513,"src":"6807:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":481,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6807:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6806:9:3"},"scope":1290,"src":"6626:385:3","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":538,"nodeType":"Block","src":"7797:76:3","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":536,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":531,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":517,"src":"7832:5:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},{"id":532,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":520,"src":"7839:10:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[] memory"}},{"id":533,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":525,"src":"7851:6:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"},{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[] memory"},{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}],"id":530,"name":"processMultiProof","nodeType":"Identifier","overloadedDeclarations":[697,901],"referencedDeclaration":697,"src":"7814:17:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_array$_t_bool_$dyn_memory_ptr_$_t_array$_t_bytes32_$dyn_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes32[] memory,bool[] memory,bytes32[] memory) pure returns (bytes32)"}},"id":534,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7814:44:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":535,"name":"root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":522,"src":"7862:4:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"7814:52:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":529,"id":537,"nodeType":"Return","src":"7807:59:3"}]},"documentation":{"id":514,"nodeType":"StructuredDocumentation","src":"7017:593:3","text":" @dev Returns true if the `leaves` can be simultaneously proven to be a part of a Merkle tree defined by\n `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n This version handles multiproofs in memory with the default hashing function.\n CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\n NOTE: Consider the case where `root == proof[0] && leaves.length == 0` as it will return `true`.\n The `leaves` must be validated independently. See {processMultiProof}."},"id":539,"implemented":true,"kind":"function","modifiers":[],"name":"multiProofVerify","nameLocation":"7624:16:3","nodeType":"FunctionDefinition","parameters":{"id":526,"nodeType":"ParameterList","parameters":[{"constant":false,"id":517,"mutability":"mutable","name":"proof","nameLocation":"7667:5:3","nodeType":"VariableDeclaration","scope":539,"src":"7650:22:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":515,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7650:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":516,"nodeType":"ArrayTypeName","src":"7650:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":520,"mutability":"mutable","name":"proofFlags","nameLocation":"7696:10:3","nodeType":"VariableDeclaration","scope":539,"src":"7682:24:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":518,"name":"bool","nodeType":"ElementaryTypeName","src":"7682:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":519,"nodeType":"ArrayTypeName","src":"7682:6:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"},{"constant":false,"id":522,"mutability":"mutable","name":"root","nameLocation":"7724:4:3","nodeType":"VariableDeclaration","scope":539,"src":"7716:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":521,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7716:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":525,"mutability":"mutable","name":"leaves","nameLocation":"7755:6:3","nodeType":"VariableDeclaration","scope":539,"src":"7738:23:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":523,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7738:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":524,"nodeType":"ArrayTypeName","src":"7738:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"7640:127:3"},"returnParameters":{"id":529,"nodeType":"ParameterList","parameters":[{"constant":false,"id":528,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":539,"src":"7791:4:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":527,"name":"bool","nodeType":"ElementaryTypeName","src":"7791:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"7790:6:3"},"scope":1290,"src":"7615:258:3","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":696,"nodeType":"Block","src":"9159:2104:3","statements":[{"assignments":[555],"declarations":[{"constant":false,"id":555,"mutability":"mutable","name":"leavesLen","nameLocation":"9551:9:3","nodeType":"VariableDeclaration","scope":696,"src":"9543:17:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":554,"name":"uint256","nodeType":"ElementaryTypeName","src":"9543:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":558,"initialValue":{"expression":{"id":556,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":549,"src":"9563:6:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":557,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9570:6:3","memberName":"length","nodeType":"MemberAccess","src":"9563:13:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9543:33:3"},{"assignments":[560],"declarations":[{"constant":false,"id":560,"mutability":"mutable","name":"proofFlagsLen","nameLocation":"9594:13:3","nodeType":"VariableDeclaration","scope":696,"src":"9586:21:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":559,"name":"uint256","nodeType":"ElementaryTypeName","src":"9586:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":563,"initialValue":{"expression":{"id":561,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":546,"src":"9610:10:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[] memory"}},"id":562,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9621:6:3","memberName":"length","nodeType":"MemberAccess","src":"9610:17:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9586:41:3"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":571,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":567,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":564,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":555,"src":"9675:9:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"expression":{"id":565,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":543,"src":"9687:5:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":566,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9693:6:3","memberName":"length","nodeType":"MemberAccess","src":"9687:12:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9675:24:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":570,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":568,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":560,"src":"9703:13:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":569,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9719:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9703:17:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9675:45:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":576,"nodeType":"IfStatement","src":"9671:113:3","trueBody":{"id":575,"nodeType":"Block","src":"9722:62:3","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":572,"name":"MerkleProofInvalidMultiproof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":225,"src":"9743:28:3","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":573,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9743:30:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":574,"nodeType":"RevertStatement","src":"9736:37:3"}]}},{"assignments":[581],"declarations":[{"constant":false,"id":581,"mutability":"mutable","name":"hashes","nameLocation":"10045:6:3","nodeType":"VariableDeclaration","scope":696,"src":"10028:23:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":579,"name":"bytes32","nodeType":"ElementaryTypeName","src":"10028:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":580,"nodeType":"ArrayTypeName","src":"10028:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"id":587,"initialValue":{"arguments":[{"id":585,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":560,"src":"10068:13:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":584,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"10054:13:3","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (bytes32[] memory)"},"typeName":{"baseType":{"id":582,"name":"bytes32","nodeType":"ElementaryTypeName","src":"10058:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":583,"nodeType":"ArrayTypeName","src":"10058:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}}},"id":586,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10054:28:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"nodeType":"VariableDeclarationStatement","src":"10028:54:3"},{"assignments":[589],"declarations":[{"constant":false,"id":589,"mutability":"mutable","name":"leafPos","nameLocation":"10100:7:3","nodeType":"VariableDeclaration","scope":696,"src":"10092:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":588,"name":"uint256","nodeType":"ElementaryTypeName","src":"10092:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":591,"initialValue":{"hexValue":"30","id":590,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10110:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"10092:19:3"},{"assignments":[593],"declarations":[{"constant":false,"id":593,"mutability":"mutable","name":"hashPos","nameLocation":"10129:7:3","nodeType":"VariableDeclaration","scope":696,"src":"10121:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":592,"name":"uint256","nodeType":"ElementaryTypeName","src":"10121:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":595,"initialValue":{"hexValue":"30","id":594,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10139:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"10121:19:3"},{"assignments":[597],"declarations":[{"constant":false,"id":597,"mutability":"mutable","name":"proofPos","nameLocation":"10158:8:3","nodeType":"VariableDeclaration","scope":696,"src":"10150:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":596,"name":"uint256","nodeType":"ElementaryTypeName","src":"10150:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":599,"initialValue":{"hexValue":"30","id":598,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10169:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"10150:20:3"},{"body":{"id":659,"nodeType":"Block","src":"10590:310:3","statements":[{"assignments":[611],"declarations":[{"constant":false,"id":611,"mutability":"mutable","name":"a","nameLocation":"10612:1:3","nodeType":"VariableDeclaration","scope":659,"src":"10604:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":610,"name":"bytes32","nodeType":"ElementaryTypeName","src":"10604:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":624,"initialValue":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":614,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":612,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":589,"src":"10616:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":613,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":555,"src":"10626:9:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10616:19:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":619,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":581,"src":"10658:6:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":622,"indexExpression":{"id":621,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"10665:9:3","subExpression":{"id":620,"name":"hashPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":593,"src":"10665:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10658:17:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":623,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"10616:59:3","trueExpression":{"baseExpression":{"id":615,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":549,"src":"10638:6:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":618,"indexExpression":{"id":617,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"10645:9:3","subExpression":{"id":616,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":589,"src":"10645:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10638:17:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"10604:71:3"},{"assignments":[626],"declarations":[{"constant":false,"id":626,"mutability":"mutable","name":"b","nameLocation":"10697:1:3","nodeType":"VariableDeclaration","scope":659,"src":"10689:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":625,"name":"bytes32","nodeType":"ElementaryTypeName","src":"10689:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":648,"initialValue":{"condition":{"baseExpression":{"id":627,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":546,"src":"10701:10:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[] memory"}},"id":629,"indexExpression":{"id":628,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":601,"src":"10712:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10701:13:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":643,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":543,"src":"10813:5:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":646,"indexExpression":{"id":645,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"10819:10:3","subExpression":{"id":644,"name":"proofPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":597,"src":"10819:8:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10813:17:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":647,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"10701:129:3","trueExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":632,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":630,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":589,"src":"10734:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":631,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":555,"src":"10744:9:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10734:19:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":637,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":581,"src":"10776:6:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":640,"indexExpression":{"id":639,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"10783:9:3","subExpression":{"id":638,"name":"hashPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":593,"src":"10783:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10776:17:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":641,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"10734:59:3","trueExpression":{"baseExpression":{"id":633,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":549,"src":"10756:6:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":636,"indexExpression":{"id":635,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"10763:9:3","subExpression":{"id":634,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":589,"src":"10763:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10756:17:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":642,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"10733:61:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"10689:141:3"},{"expression":{"id":657,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":649,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":581,"src":"10844:6:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":651,"indexExpression":{"id":650,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":601,"src":"10851:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"10844:9:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":654,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":611,"src":"10884:1:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":655,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":626,"src":"10887:1:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":652,"name":"Hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":217,"src":"10856:6:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Hashes_$217_$","typeString":"type(library Hashes)"}},"id":653,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10863:20:3","memberName":"commutativeKeccak256","nodeType":"MemberAccess","referencedDeclaration":204,"src":"10856:27:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":656,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10856:33:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"10844:45:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":658,"nodeType":"ExpressionStatement","src":"10844:45:3"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":606,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":604,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":601,"src":"10566:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":605,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":560,"src":"10570:13:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10566:17:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":660,"initializationExpression":{"assignments":[601],"declarations":[{"constant":false,"id":601,"mutability":"mutable","name":"i","nameLocation":"10559:1:3","nodeType":"VariableDeclaration","scope":660,"src":"10551:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":600,"name":"uint256","nodeType":"ElementaryTypeName","src":"10551:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":603,"initialValue":{"hexValue":"30","id":602,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10563:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"10551:13:3"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":608,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"10585:3:3","subExpression":{"id":607,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":601,"src":"10585:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":609,"nodeType":"ExpressionStatement","src":"10585:3:3"},"nodeType":"ForStatement","src":"10546:354:3"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":663,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":661,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":560,"src":"10914:13:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":662,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10930:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"10914:17:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":683,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":681,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":555,"src":"11155:9:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":682,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11167:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11155:13:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":693,"nodeType":"Block","src":"11217:40:3","statements":[{"expression":{"baseExpression":{"id":689,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":543,"src":"11238:5:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":691,"indexExpression":{"hexValue":"30","id":690,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11244:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11238:8:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":553,"id":692,"nodeType":"Return","src":"11231:15:3"}]},"id":694,"nodeType":"IfStatement","src":"11151:106:3","trueBody":{"id":688,"nodeType":"Block","src":"11170:41:3","statements":[{"expression":{"baseExpression":{"id":684,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":549,"src":"11191:6:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":686,"indexExpression":{"hexValue":"30","id":685,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11198:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11191:9:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":553,"id":687,"nodeType":"Return","src":"11184:16:3"}]}},"id":695,"nodeType":"IfStatement","src":"10910:347:3","trueBody":{"id":680,"nodeType":"Block","src":"10933:212:3","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":667,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":664,"name":"proofPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":597,"src":"10951:8:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":665,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":543,"src":"10963:5:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":666,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10969:6:3","memberName":"length","nodeType":"MemberAccess","src":"10963:12:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10951:24:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":672,"nodeType":"IfStatement","src":"10947:100:3","trueBody":{"id":671,"nodeType":"Block","src":"10977:70:3","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":668,"name":"MerkleProofInvalidMultiproof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":225,"src":"11002:28:3","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":669,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11002:30:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":670,"nodeType":"RevertStatement","src":"10995:37:3"}]}},{"id":679,"nodeType":"UncheckedBlock","src":"11060:75:3","statements":[{"expression":{"baseExpression":{"id":673,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":581,"src":"11095:6:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":677,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":676,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":674,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":560,"src":"11102:13:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":675,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11118:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"11102:17:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11095:25:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":553,"id":678,"nodeType":"Return","src":"11088:32:3"}]}]}}]},"documentation":{"id":540,"nodeType":"StructuredDocumentation","src":"7879:1100:3","text":" @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n respectively.\n This version handles multiproofs in memory with the default hashing function.\n CAUTION: Not all Merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n NOTE: The _empty set_ (i.e. the case where `proof.length == 1 && leaves.length == 0`) is considered a no-op,\n and therefore a valid multiproof (i.e. it returns `proof[0]`). Consider disallowing this case if you're not\n validating the leaves elsewhere."},"id":697,"implemented":true,"kind":"function","modifiers":[],"name":"processMultiProof","nameLocation":"8993:17:3","nodeType":"FunctionDefinition","parameters":{"id":550,"nodeType":"ParameterList","parameters":[{"constant":false,"id":543,"mutability":"mutable","name":"proof","nameLocation":"9037:5:3","nodeType":"VariableDeclaration","scope":697,"src":"9020:22:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":541,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9020:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":542,"nodeType":"ArrayTypeName","src":"9020:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":546,"mutability":"mutable","name":"proofFlags","nameLocation":"9066:10:3","nodeType":"VariableDeclaration","scope":697,"src":"9052:24:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":544,"name":"bool","nodeType":"ElementaryTypeName","src":"9052:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":545,"nodeType":"ArrayTypeName","src":"9052:6:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"},{"constant":false,"id":549,"mutability":"mutable","name":"leaves","nameLocation":"9103:6:3","nodeType":"VariableDeclaration","scope":697,"src":"9086:23:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":547,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9086:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":548,"nodeType":"ArrayTypeName","src":"9086:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"9010:105:3"},"returnParameters":{"id":553,"nodeType":"ParameterList","parameters":[{"constant":false,"id":552,"mutability":"mutable","name":"merkleRoot","nameLocation":"9147:10:3","nodeType":"VariableDeclaration","scope":697,"src":"9139:18:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":551,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9139:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"9138:20:3"},"scope":1290,"src":"8984:2279:3","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":733,"nodeType":"Block","src":"12112:84:3","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":731,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":725,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":701,"src":"12147:5:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},{"id":726,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":704,"src":"12154:10:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[] memory"}},{"id":727,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":709,"src":"12166:6:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},{"id":728,"name":"hasher","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":719,"src":"12174:6:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"},{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[] memory"},{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"},{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"}],"id":724,"name":"processMultiProof","nodeType":"Identifier","overloadedDeclarations":[697,901],"referencedDeclaration":901,"src":"12129:17:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_array$_t_bool_$dyn_memory_ptr_$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$_$returns$_t_bytes32_$","typeString":"function (bytes32[] memory,bool[] memory,bytes32[] memory,function (bytes32,bytes32) view returns (bytes32)) view returns (bytes32)"}},"id":729,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12129:52:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":730,"name":"root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":706,"src":"12185:4:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"12129:60:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":723,"id":732,"nodeType":"Return","src":"12122:67:3"}]},"documentation":{"id":698,"nodeType":"StructuredDocumentation","src":"11269:590:3","text":" @dev Returns true if the `leaves` can be simultaneously proven to be a part of a Merkle tree defined by\n `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n This version handles multiproofs in memory with a custom hashing function.\n CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\n NOTE: Consider the case where `root == proof[0] && leaves.length == 0` as it will return `true`.\n The `leaves` must be validated independently. See {processMultiProof}."},"id":734,"implemented":true,"kind":"function","modifiers":[],"name":"multiProofVerify","nameLocation":"11873:16:3","nodeType":"FunctionDefinition","parameters":{"id":720,"nodeType":"ParameterList","parameters":[{"constant":false,"id":701,"mutability":"mutable","name":"proof","nameLocation":"11916:5:3","nodeType":"VariableDeclaration","scope":734,"src":"11899:22:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":699,"name":"bytes32","nodeType":"ElementaryTypeName","src":"11899:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":700,"nodeType":"ArrayTypeName","src":"11899:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":704,"mutability":"mutable","name":"proofFlags","nameLocation":"11945:10:3","nodeType":"VariableDeclaration","scope":734,"src":"11931:24:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":702,"name":"bool","nodeType":"ElementaryTypeName","src":"11931:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":703,"nodeType":"ArrayTypeName","src":"11931:6:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"},{"constant":false,"id":706,"mutability":"mutable","name":"root","nameLocation":"11973:4:3","nodeType":"VariableDeclaration","scope":734,"src":"11965:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":705,"name":"bytes32","nodeType":"ElementaryTypeName","src":"11965:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":709,"mutability":"mutable","name":"leaves","nameLocation":"12004:6:3","nodeType":"VariableDeclaration","scope":734,"src":"11987:23:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":707,"name":"bytes32","nodeType":"ElementaryTypeName","src":"11987:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":708,"nodeType":"ArrayTypeName","src":"11987:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":719,"mutability":"mutable","name":"hasher","nameLocation":"12070:6:3","nodeType":"VariableDeclaration","scope":734,"src":"12020:56:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"},"typeName":{"id":718,"nodeType":"FunctionTypeName","parameterTypes":{"id":714,"nodeType":"ParameterList","parameters":[{"constant":false,"id":711,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":718,"src":"12029:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":710,"name":"bytes32","nodeType":"ElementaryTypeName","src":"12029:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":713,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":718,"src":"12038:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":712,"name":"bytes32","nodeType":"ElementaryTypeName","src":"12038:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"12028:18:3"},"returnParameterTypes":{"id":717,"nodeType":"ParameterList","parameters":[{"constant":false,"id":716,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":718,"src":"12061:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":715,"name":"bytes32","nodeType":"ElementaryTypeName","src":"12061:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"12060:9:3"},"src":"12020:56:3","stateMutability":"view","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"},"visibility":"internal"},"visibility":"internal"}],"src":"11889:193:3"},"returnParameters":{"id":723,"nodeType":"ParameterList","parameters":[{"constant":false,"id":722,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":734,"src":"12106:4:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":721,"name":"bool","nodeType":"ElementaryTypeName","src":"12106:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"12105:6:3"},"scope":1290,"src":"11864:332:3","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":900,"nodeType":"Block","src":"13545:2083:3","statements":[{"assignments":[760],"declarations":[{"constant":false,"id":760,"mutability":"mutable","name":"leavesLen","nameLocation":"13937:9:3","nodeType":"VariableDeclaration","scope":900,"src":"13929:17:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":759,"name":"uint256","nodeType":"ElementaryTypeName","src":"13929:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":763,"initialValue":{"expression":{"id":761,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":744,"src":"13949:6:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":762,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"13956:6:3","memberName":"length","nodeType":"MemberAccess","src":"13949:13:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"13929:33:3"},{"assignments":[765],"declarations":[{"constant":false,"id":765,"mutability":"mutable","name":"proofFlagsLen","nameLocation":"13980:13:3","nodeType":"VariableDeclaration","scope":900,"src":"13972:21:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":764,"name":"uint256","nodeType":"ElementaryTypeName","src":"13972:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":768,"initialValue":{"expression":{"id":766,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":741,"src":"13996:10:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[] memory"}},"id":767,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"14007:6:3","memberName":"length","nodeType":"MemberAccess","src":"13996:17:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"13972:41:3"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":776,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":772,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":769,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":760,"src":"14061:9:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"expression":{"id":770,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":738,"src":"14073:5:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":771,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"14079:6:3","memberName":"length","nodeType":"MemberAccess","src":"14073:12:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14061:24:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":775,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":773,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":765,"src":"14089:13:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":774,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14105:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"14089:17:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14061:45:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":781,"nodeType":"IfStatement","src":"14057:113:3","trueBody":{"id":780,"nodeType":"Block","src":"14108:62:3","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":777,"name":"MerkleProofInvalidMultiproof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":225,"src":"14129:28:3","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":778,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14129:30:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":779,"nodeType":"RevertStatement","src":"14122:37:3"}]}},{"assignments":[786],"declarations":[{"constant":false,"id":786,"mutability":"mutable","name":"hashes","nameLocation":"14431:6:3","nodeType":"VariableDeclaration","scope":900,"src":"14414:23:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":784,"name":"bytes32","nodeType":"ElementaryTypeName","src":"14414:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":785,"nodeType":"ArrayTypeName","src":"14414:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"id":792,"initialValue":{"arguments":[{"id":790,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":765,"src":"14454:13:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":789,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"14440:13:3","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (bytes32[] memory)"},"typeName":{"baseType":{"id":787,"name":"bytes32","nodeType":"ElementaryTypeName","src":"14444:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":788,"nodeType":"ArrayTypeName","src":"14444:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}}},"id":791,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14440:28:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"nodeType":"VariableDeclarationStatement","src":"14414:54:3"},{"assignments":[794],"declarations":[{"constant":false,"id":794,"mutability":"mutable","name":"leafPos","nameLocation":"14486:7:3","nodeType":"VariableDeclaration","scope":900,"src":"14478:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":793,"name":"uint256","nodeType":"ElementaryTypeName","src":"14478:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":796,"initialValue":{"hexValue":"30","id":795,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14496:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"14478:19:3"},{"assignments":[798],"declarations":[{"constant":false,"id":798,"mutability":"mutable","name":"hashPos","nameLocation":"14515:7:3","nodeType":"VariableDeclaration","scope":900,"src":"14507:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":797,"name":"uint256","nodeType":"ElementaryTypeName","src":"14507:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":800,"initialValue":{"hexValue":"30","id":799,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14525:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"14507:19:3"},{"assignments":[802],"declarations":[{"constant":false,"id":802,"mutability":"mutable","name":"proofPos","nameLocation":"14544:8:3","nodeType":"VariableDeclaration","scope":900,"src":"14536:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":801,"name":"uint256","nodeType":"ElementaryTypeName","src":"14536:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":804,"initialValue":{"hexValue":"30","id":803,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14555:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"14536:20:3"},{"body":{"id":863,"nodeType":"Block","src":"14976:289:3","statements":[{"assignments":[816],"declarations":[{"constant":false,"id":816,"mutability":"mutable","name":"a","nameLocation":"14998:1:3","nodeType":"VariableDeclaration","scope":863,"src":"14990:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":815,"name":"bytes32","nodeType":"ElementaryTypeName","src":"14990:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":829,"initialValue":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":819,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":817,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":794,"src":"15002:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":818,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":760,"src":"15012:9:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"15002:19:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":824,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":786,"src":"15044:6:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":827,"indexExpression":{"id":826,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"15051:9:3","subExpression":{"id":825,"name":"hashPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":798,"src":"15051:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"15044:17:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":828,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"15002:59:3","trueExpression":{"baseExpression":{"id":820,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":744,"src":"15024:6:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":823,"indexExpression":{"id":822,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"15031:9:3","subExpression":{"id":821,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":794,"src":"15031:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"15024:17:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"14990:71:3"},{"assignments":[831],"declarations":[{"constant":false,"id":831,"mutability":"mutable","name":"b","nameLocation":"15083:1:3","nodeType":"VariableDeclaration","scope":863,"src":"15075:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":830,"name":"bytes32","nodeType":"ElementaryTypeName","src":"15075:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":853,"initialValue":{"condition":{"baseExpression":{"id":832,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":741,"src":"15087:10:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[] memory"}},"id":834,"indexExpression":{"id":833,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":806,"src":"15098:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"15087:13:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":848,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":738,"src":"15199:5:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":851,"indexExpression":{"id":850,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"15205:10:3","subExpression":{"id":849,"name":"proofPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":802,"src":"15205:8:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"15199:17:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":852,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"15087:129:3","trueExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":837,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":835,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":794,"src":"15120:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":836,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":760,"src":"15130:9:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"15120:19:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":842,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":786,"src":"15162:6:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":845,"indexExpression":{"id":844,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"15169:9:3","subExpression":{"id":843,"name":"hashPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":798,"src":"15169:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"15162:17:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":846,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"15120:59:3","trueExpression":{"baseExpression":{"id":838,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":744,"src":"15142:6:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":841,"indexExpression":{"id":840,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"15149:9:3","subExpression":{"id":839,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":794,"src":"15149:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"15142:17:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":847,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"15119:61:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"15075:141:3"},{"expression":{"id":861,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":854,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":786,"src":"15230:6:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":856,"indexExpression":{"id":855,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":806,"src":"15237:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"15230:9:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":858,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":816,"src":"15249:1:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":859,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":831,"src":"15252:1:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":857,"name":"hasher","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":754,"src":"15242:6:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"}},"id":860,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15242:12:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"15230:24:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":862,"nodeType":"ExpressionStatement","src":"15230:24:3"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":811,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":809,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":806,"src":"14952:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":810,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":765,"src":"14956:13:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14952:17:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":864,"initializationExpression":{"assignments":[806],"declarations":[{"constant":false,"id":806,"mutability":"mutable","name":"i","nameLocation":"14945:1:3","nodeType":"VariableDeclaration","scope":864,"src":"14937:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":805,"name":"uint256","nodeType":"ElementaryTypeName","src":"14937:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":808,"initialValue":{"hexValue":"30","id":807,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14949:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"14937:13:3"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":813,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"14971:3:3","subExpression":{"id":812,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":806,"src":"14971:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":814,"nodeType":"ExpressionStatement","src":"14971:3:3"},"nodeType":"ForStatement","src":"14932:333:3"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":867,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":865,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":765,"src":"15279:13:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":866,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15295:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"15279:17:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":887,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":885,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":760,"src":"15520:9:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":886,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15532:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"15520:13:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":897,"nodeType":"Block","src":"15582:40:3","statements":[{"expression":{"baseExpression":{"id":893,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":738,"src":"15603:5:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":895,"indexExpression":{"hexValue":"30","id":894,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15609:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"15603:8:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":758,"id":896,"nodeType":"Return","src":"15596:15:3"}]},"id":898,"nodeType":"IfStatement","src":"15516:106:3","trueBody":{"id":892,"nodeType":"Block","src":"15535:41:3","statements":[{"expression":{"baseExpression":{"id":888,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":744,"src":"15556:6:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":890,"indexExpression":{"hexValue":"30","id":889,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15563:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"15556:9:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":758,"id":891,"nodeType":"Return","src":"15549:16:3"}]}},"id":899,"nodeType":"IfStatement","src":"15275:347:3","trueBody":{"id":884,"nodeType":"Block","src":"15298:212:3","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":871,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":868,"name":"proofPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":802,"src":"15316:8:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":869,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":738,"src":"15328:5:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":870,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"15334:6:3","memberName":"length","nodeType":"MemberAccess","src":"15328:12:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"15316:24:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":876,"nodeType":"IfStatement","src":"15312:100:3","trueBody":{"id":875,"nodeType":"Block","src":"15342:70:3","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":872,"name":"MerkleProofInvalidMultiproof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":225,"src":"15367:28:3","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":873,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15367:30:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":874,"nodeType":"RevertStatement","src":"15360:37:3"}]}},{"id":883,"nodeType":"UncheckedBlock","src":"15425:75:3","statements":[{"expression":{"baseExpression":{"id":877,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":786,"src":"15460:6:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":881,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":880,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":878,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":765,"src":"15467:13:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":879,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15483:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"15467:17:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"15460:25:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":758,"id":882,"nodeType":"Return","src":"15453:32:3"}]}]}}]},"documentation":{"id":735,"nodeType":"StructuredDocumentation","src":"12202:1097:3","text":" @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n respectively.\n This version handles multiproofs in memory with a custom hashing function.\n CAUTION: Not all Merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n NOTE: The _empty set_ (i.e. the case where `proof.length == 1 && leaves.length == 0`) is considered a no-op,\n and therefore a valid multiproof (i.e. it returns `proof[0]`). Consider disallowing this case if you're not\n validating the leaves elsewhere."},"id":901,"implemented":true,"kind":"function","modifiers":[],"name":"processMultiProof","nameLocation":"13313:17:3","nodeType":"FunctionDefinition","parameters":{"id":755,"nodeType":"ParameterList","parameters":[{"constant":false,"id":738,"mutability":"mutable","name":"proof","nameLocation":"13357:5:3","nodeType":"VariableDeclaration","scope":901,"src":"13340:22:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":736,"name":"bytes32","nodeType":"ElementaryTypeName","src":"13340:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":737,"nodeType":"ArrayTypeName","src":"13340:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":741,"mutability":"mutable","name":"proofFlags","nameLocation":"13386:10:3","nodeType":"VariableDeclaration","scope":901,"src":"13372:24:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":739,"name":"bool","nodeType":"ElementaryTypeName","src":"13372:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":740,"nodeType":"ArrayTypeName","src":"13372:6:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"},{"constant":false,"id":744,"mutability":"mutable","name":"leaves","nameLocation":"13423:6:3","nodeType":"VariableDeclaration","scope":901,"src":"13406:23:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":742,"name":"bytes32","nodeType":"ElementaryTypeName","src":"13406:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":743,"nodeType":"ArrayTypeName","src":"13406:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":754,"mutability":"mutable","name":"hasher","nameLocation":"13489:6:3","nodeType":"VariableDeclaration","scope":901,"src":"13439:56:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"},"typeName":{"id":753,"nodeType":"FunctionTypeName","parameterTypes":{"id":749,"nodeType":"ParameterList","parameters":[{"constant":false,"id":746,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":753,"src":"13448:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":745,"name":"bytes32","nodeType":"ElementaryTypeName","src":"13448:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":748,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":753,"src":"13457:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":747,"name":"bytes32","nodeType":"ElementaryTypeName","src":"13457:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"13447:18:3"},"returnParameterTypes":{"id":752,"nodeType":"ParameterList","parameters":[{"constant":false,"id":751,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":753,"src":"13480:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":750,"name":"bytes32","nodeType":"ElementaryTypeName","src":"13480:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"13479:9:3"},"src":"13439:56:3","stateMutability":"view","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"},"visibility":"internal"},"visibility":"internal"}],"src":"13330:171:3"},"returnParameters":{"id":758,"nodeType":"ParameterList","parameters":[{"constant":false,"id":757,"mutability":"mutable","name":"merkleRoot","nameLocation":"13533:10:3","nodeType":"VariableDeclaration","scope":901,"src":"13525:18:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":756,"name":"bytes32","nodeType":"ElementaryTypeName","src":"13525:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"13524:20:3"},"scope":1290,"src":"13304:2324:3","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":926,"nodeType":"Block","src":"16436:84:3","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":924,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":919,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":905,"src":"16479:5:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},{"id":920,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":908,"src":"16486:10:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[] calldata"}},{"id":921,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":913,"src":"16498:6:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"},{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[] calldata"},{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}],"id":918,"name":"processMultiProofCalldata","nodeType":"Identifier","overloadedDeclarations":[1085,1289],"referencedDeclaration":1085,"src":"16453:25:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_bytes32_$dyn_calldata_ptr_$_t_array$_t_bool_$dyn_calldata_ptr_$_t_array$_t_bytes32_$dyn_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes32[] calldata,bool[] calldata,bytes32[] memory) pure returns (bytes32)"}},"id":922,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16453:52:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":923,"name":"root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":910,"src":"16509:4:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"16453:60:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":917,"id":925,"nodeType":"Return","src":"16446:67:3"}]},"documentation":{"id":902,"nodeType":"StructuredDocumentation","src":"15634:603:3","text":" @dev Returns true if the `leaves` can be simultaneously proven to be a part of a Merkle tree defined by\n `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n This version handles multiproofs in calldata with the default hashing function.\n CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\n NOTE: Consider the case where `root == proof[0] && leaves.length == 0` as it will return `true`.\n The `leaves` must be validated independently. See {processMultiProofCalldata}."},"id":927,"implemented":true,"kind":"function","modifiers":[],"name":"multiProofVerifyCalldata","nameLocation":"16251:24:3","nodeType":"FunctionDefinition","parameters":{"id":914,"nodeType":"ParameterList","parameters":[{"constant":false,"id":905,"mutability":"mutable","name":"proof","nameLocation":"16304:5:3","nodeType":"VariableDeclaration","scope":927,"src":"16285:24:3","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":903,"name":"bytes32","nodeType":"ElementaryTypeName","src":"16285:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":904,"nodeType":"ArrayTypeName","src":"16285:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":908,"mutability":"mutable","name":"proofFlags","nameLocation":"16335:10:3","nodeType":"VariableDeclaration","scope":927,"src":"16319:26:3","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":906,"name":"bool","nodeType":"ElementaryTypeName","src":"16319:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":907,"nodeType":"ArrayTypeName","src":"16319:6:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"},{"constant":false,"id":910,"mutability":"mutable","name":"root","nameLocation":"16363:4:3","nodeType":"VariableDeclaration","scope":927,"src":"16355:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":909,"name":"bytes32","nodeType":"ElementaryTypeName","src":"16355:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":913,"mutability":"mutable","name":"leaves","nameLocation":"16394:6:3","nodeType":"VariableDeclaration","scope":927,"src":"16377:23:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":911,"name":"bytes32","nodeType":"ElementaryTypeName","src":"16377:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":912,"nodeType":"ArrayTypeName","src":"16377:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"16275:131:3"},"returnParameters":{"id":917,"nodeType":"ParameterList","parameters":[{"constant":false,"id":916,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":927,"src":"16430:4:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":915,"name":"bool","nodeType":"ElementaryTypeName","src":"16430:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"16429:6:3"},"scope":1290,"src":"16242:278:3","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1084,"nodeType":"Block","src":"17820:2104:3","statements":[{"assignments":[943],"declarations":[{"constant":false,"id":943,"mutability":"mutable","name":"leavesLen","nameLocation":"18212:9:3","nodeType":"VariableDeclaration","scope":1084,"src":"18204:17:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":942,"name":"uint256","nodeType":"ElementaryTypeName","src":"18204:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":946,"initialValue":{"expression":{"id":944,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":937,"src":"18224:6:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":945,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"18231:6:3","memberName":"length","nodeType":"MemberAccess","src":"18224:13:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"18204:33:3"},{"assignments":[948],"declarations":[{"constant":false,"id":948,"mutability":"mutable","name":"proofFlagsLen","nameLocation":"18255:13:3","nodeType":"VariableDeclaration","scope":1084,"src":"18247:21:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":947,"name":"uint256","nodeType":"ElementaryTypeName","src":"18247:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":951,"initialValue":{"expression":{"id":949,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":934,"src":"18271:10:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[] calldata"}},"id":950,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"18282:6:3","memberName":"length","nodeType":"MemberAccess","src":"18271:17:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"18247:41:3"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":959,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":955,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":952,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":943,"src":"18336:9:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"expression":{"id":953,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":931,"src":"18348:5:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":954,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"18354:6:3","memberName":"length","nodeType":"MemberAccess","src":"18348:12:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"18336:24:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":958,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":956,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":948,"src":"18364:13:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":957,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"18380:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"18364:17:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"18336:45:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":964,"nodeType":"IfStatement","src":"18332:113:3","trueBody":{"id":963,"nodeType":"Block","src":"18383:62:3","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":960,"name":"MerkleProofInvalidMultiproof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":225,"src":"18404:28:3","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":961,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18404:30:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":962,"nodeType":"RevertStatement","src":"18397:37:3"}]}},{"assignments":[969],"declarations":[{"constant":false,"id":969,"mutability":"mutable","name":"hashes","nameLocation":"18706:6:3","nodeType":"VariableDeclaration","scope":1084,"src":"18689:23:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":967,"name":"bytes32","nodeType":"ElementaryTypeName","src":"18689:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":968,"nodeType":"ArrayTypeName","src":"18689:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"id":975,"initialValue":{"arguments":[{"id":973,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":948,"src":"18729:13:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":972,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"18715:13:3","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (bytes32[] memory)"},"typeName":{"baseType":{"id":970,"name":"bytes32","nodeType":"ElementaryTypeName","src":"18719:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":971,"nodeType":"ArrayTypeName","src":"18719:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}}},"id":974,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18715:28:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"nodeType":"VariableDeclarationStatement","src":"18689:54:3"},{"assignments":[977],"declarations":[{"constant":false,"id":977,"mutability":"mutable","name":"leafPos","nameLocation":"18761:7:3","nodeType":"VariableDeclaration","scope":1084,"src":"18753:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":976,"name":"uint256","nodeType":"ElementaryTypeName","src":"18753:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":979,"initialValue":{"hexValue":"30","id":978,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"18771:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"18753:19:3"},{"assignments":[981],"declarations":[{"constant":false,"id":981,"mutability":"mutable","name":"hashPos","nameLocation":"18790:7:3","nodeType":"VariableDeclaration","scope":1084,"src":"18782:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":980,"name":"uint256","nodeType":"ElementaryTypeName","src":"18782:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":983,"initialValue":{"hexValue":"30","id":982,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"18800:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"18782:19:3"},{"assignments":[985],"declarations":[{"constant":false,"id":985,"mutability":"mutable","name":"proofPos","nameLocation":"18819:8:3","nodeType":"VariableDeclaration","scope":1084,"src":"18811:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":984,"name":"uint256","nodeType":"ElementaryTypeName","src":"18811:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":987,"initialValue":{"hexValue":"30","id":986,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"18830:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"18811:20:3"},{"body":{"id":1047,"nodeType":"Block","src":"19251:310:3","statements":[{"assignments":[999],"declarations":[{"constant":false,"id":999,"mutability":"mutable","name":"a","nameLocation":"19273:1:3","nodeType":"VariableDeclaration","scope":1047,"src":"19265:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":998,"name":"bytes32","nodeType":"ElementaryTypeName","src":"19265:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1012,"initialValue":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1002,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1000,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":977,"src":"19277:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1001,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":943,"src":"19287:9:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"19277:19:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":1007,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":969,"src":"19319:6:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1010,"indexExpression":{"id":1009,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"19326:9:3","subExpression":{"id":1008,"name":"hashPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":981,"src":"19326:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"19319:17:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1011,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"19277:59:3","trueExpression":{"baseExpression":{"id":1003,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":937,"src":"19299:6:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1006,"indexExpression":{"id":1005,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"19306:9:3","subExpression":{"id":1004,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":977,"src":"19306:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"19299:17:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"19265:71:3"},{"assignments":[1014],"declarations":[{"constant":false,"id":1014,"mutability":"mutable","name":"b","nameLocation":"19358:1:3","nodeType":"VariableDeclaration","scope":1047,"src":"19350:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1013,"name":"bytes32","nodeType":"ElementaryTypeName","src":"19350:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1036,"initialValue":{"condition":{"baseExpression":{"id":1015,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":934,"src":"19362:10:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[] calldata"}},"id":1017,"indexExpression":{"id":1016,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":989,"src":"19373:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"19362:13:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":1031,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":931,"src":"19474:5:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":1034,"indexExpression":{"id":1033,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"19480:10:3","subExpression":{"id":1032,"name":"proofPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":985,"src":"19480:8:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"19474:17:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1035,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"19362:129:3","trueExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1020,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1018,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":977,"src":"19395:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1019,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":943,"src":"19405:9:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"19395:19:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":1025,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":969,"src":"19437:6:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1028,"indexExpression":{"id":1027,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"19444:9:3","subExpression":{"id":1026,"name":"hashPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":981,"src":"19444:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"19437:17:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1029,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"19395:59:3","trueExpression":{"baseExpression":{"id":1021,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":937,"src":"19417:6:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1024,"indexExpression":{"id":1023,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"19424:9:3","subExpression":{"id":1022,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":977,"src":"19424:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"19417:17:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":1030,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"19394:61:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"19350:141:3"},{"expression":{"id":1045,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1037,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":969,"src":"19505:6:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1039,"indexExpression":{"id":1038,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":989,"src":"19512:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"19505:9:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":1042,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":999,"src":"19545:1:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1043,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1014,"src":"19548:1:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":1040,"name":"Hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":217,"src":"19517:6:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Hashes_$217_$","typeString":"type(library Hashes)"}},"id":1041,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"19524:20:3","memberName":"commutativeKeccak256","nodeType":"MemberAccess","referencedDeclaration":204,"src":"19517:27:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":1044,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"19517:33:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"19505:45:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1046,"nodeType":"ExpressionStatement","src":"19505:45:3"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":994,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":992,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":989,"src":"19227:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":993,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":948,"src":"19231:13:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"19227:17:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1048,"initializationExpression":{"assignments":[989],"declarations":[{"constant":false,"id":989,"mutability":"mutable","name":"i","nameLocation":"19220:1:3","nodeType":"VariableDeclaration","scope":1048,"src":"19212:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":988,"name":"uint256","nodeType":"ElementaryTypeName","src":"19212:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":991,"initialValue":{"hexValue":"30","id":990,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19224:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"19212:13:3"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":996,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"19246:3:3","subExpression":{"id":995,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":989,"src":"19246:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":997,"nodeType":"ExpressionStatement","src":"19246:3:3"},"nodeType":"ForStatement","src":"19207:354:3"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1051,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1049,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":948,"src":"19575:13:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1050,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19591:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"19575:17:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1071,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1069,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":943,"src":"19816:9:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1070,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19828:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"19816:13:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1081,"nodeType":"Block","src":"19878:40:3","statements":[{"expression":{"baseExpression":{"id":1077,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":931,"src":"19899:5:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":1079,"indexExpression":{"hexValue":"30","id":1078,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19905:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"19899:8:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":941,"id":1080,"nodeType":"Return","src":"19892:15:3"}]},"id":1082,"nodeType":"IfStatement","src":"19812:106:3","trueBody":{"id":1076,"nodeType":"Block","src":"19831:41:3","statements":[{"expression":{"baseExpression":{"id":1072,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":937,"src":"19852:6:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1074,"indexExpression":{"hexValue":"30","id":1073,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19859:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"19852:9:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":941,"id":1075,"nodeType":"Return","src":"19845:16:3"}]}},"id":1083,"nodeType":"IfStatement","src":"19571:347:3","trueBody":{"id":1068,"nodeType":"Block","src":"19594:212:3","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1055,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1052,"name":"proofPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":985,"src":"19612:8:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":1053,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":931,"src":"19624:5:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":1054,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"19630:6:3","memberName":"length","nodeType":"MemberAccess","src":"19624:12:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"19612:24:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1060,"nodeType":"IfStatement","src":"19608:100:3","trueBody":{"id":1059,"nodeType":"Block","src":"19638:70:3","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":1056,"name":"MerkleProofInvalidMultiproof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":225,"src":"19663:28:3","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":1057,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"19663:30:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":1058,"nodeType":"RevertStatement","src":"19656:37:3"}]}},{"id":1067,"nodeType":"UncheckedBlock","src":"19721:75:3","statements":[{"expression":{"baseExpression":{"id":1061,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":969,"src":"19756:6:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1065,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1064,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1062,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":948,"src":"19763:13:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":1063,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19779:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"19763:17:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"19756:25:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":941,"id":1066,"nodeType":"Return","src":"19749:32:3"}]}]}}]},"documentation":{"id":928,"nodeType":"StructuredDocumentation","src":"16526:1102:3","text":" @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n respectively.\n This version handles multiproofs in calldata with the default hashing function.\n CAUTION: Not all Merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n NOTE: The _empty set_ (i.e. the case where `proof.length == 1 && leaves.length == 0`) is considered a no-op,\n and therefore a valid multiproof (i.e. it returns `proof[0]`). Consider disallowing this case if you're not\n validating the leaves elsewhere."},"id":1085,"implemented":true,"kind":"function","modifiers":[],"name":"processMultiProofCalldata","nameLocation":"17642:25:3","nodeType":"FunctionDefinition","parameters":{"id":938,"nodeType":"ParameterList","parameters":[{"constant":false,"id":931,"mutability":"mutable","name":"proof","nameLocation":"17696:5:3","nodeType":"VariableDeclaration","scope":1085,"src":"17677:24:3","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":929,"name":"bytes32","nodeType":"ElementaryTypeName","src":"17677:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":930,"nodeType":"ArrayTypeName","src":"17677:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":934,"mutability":"mutable","name":"proofFlags","nameLocation":"17727:10:3","nodeType":"VariableDeclaration","scope":1085,"src":"17711:26:3","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":932,"name":"bool","nodeType":"ElementaryTypeName","src":"17711:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":933,"nodeType":"ArrayTypeName","src":"17711:6:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"},{"constant":false,"id":937,"mutability":"mutable","name":"leaves","nameLocation":"17764:6:3","nodeType":"VariableDeclaration","scope":1085,"src":"17747:23:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":935,"name":"bytes32","nodeType":"ElementaryTypeName","src":"17747:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":936,"nodeType":"ArrayTypeName","src":"17747:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"17667:109:3"},"returnParameters":{"id":941,"nodeType":"ParameterList","parameters":[{"constant":false,"id":940,"mutability":"mutable","name":"merkleRoot","nameLocation":"17808:10:3","nodeType":"VariableDeclaration","scope":1085,"src":"17800:18:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":939,"name":"bytes32","nodeType":"ElementaryTypeName","src":"17800:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"17799:20:3"},"scope":1290,"src":"17633:2291:3","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1121,"nodeType":"Block","src":"20795:92:3","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":1119,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1113,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1089,"src":"20838:5:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},{"id":1114,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1092,"src":"20845:10:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[] calldata"}},{"id":1115,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1097,"src":"20857:6:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},{"id":1116,"name":"hasher","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1107,"src":"20865:6:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"},{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[] calldata"},{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"},{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"}],"id":1112,"name":"processMultiProofCalldata","nodeType":"Identifier","overloadedDeclarations":[1085,1289],"referencedDeclaration":1289,"src":"20812:25:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_array$_t_bytes32_$dyn_calldata_ptr_$_t_array$_t_bool_$dyn_calldata_ptr_$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$_$returns$_t_bytes32_$","typeString":"function (bytes32[] calldata,bool[] calldata,bytes32[] memory,function (bytes32,bytes32) view returns (bytes32)) view returns (bytes32)"}},"id":1117,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"20812:60:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":1118,"name":"root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1094,"src":"20876:4:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"20812:68:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1111,"id":1120,"nodeType":"Return","src":"20805:75:3"}]},"documentation":{"id":1086,"nodeType":"StructuredDocumentation","src":"19930:600:3","text":" @dev Returns true if the `leaves` can be simultaneously proven to be a part of a Merkle tree defined by\n `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n This version handles multiproofs in calldata with a custom hashing function.\n CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\n NOTE: Consider the case where `root == proof[0] && leaves.length == 0` as it will return `true`.\n The `leaves` must be validated independently. See {processMultiProofCalldata}."},"id":1122,"implemented":true,"kind":"function","modifiers":[],"name":"multiProofVerifyCalldata","nameLocation":"20544:24:3","nodeType":"FunctionDefinition","parameters":{"id":1108,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1089,"mutability":"mutable","name":"proof","nameLocation":"20597:5:3","nodeType":"VariableDeclaration","scope":1122,"src":"20578:24:3","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1087,"name":"bytes32","nodeType":"ElementaryTypeName","src":"20578:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1088,"nodeType":"ArrayTypeName","src":"20578:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":1092,"mutability":"mutable","name":"proofFlags","nameLocation":"20628:10:3","nodeType":"VariableDeclaration","scope":1122,"src":"20612:26:3","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":1090,"name":"bool","nodeType":"ElementaryTypeName","src":"20612:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1091,"nodeType":"ArrayTypeName","src":"20612:6:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"},{"constant":false,"id":1094,"mutability":"mutable","name":"root","nameLocation":"20656:4:3","nodeType":"VariableDeclaration","scope":1122,"src":"20648:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1093,"name":"bytes32","nodeType":"ElementaryTypeName","src":"20648:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1097,"mutability":"mutable","name":"leaves","nameLocation":"20687:6:3","nodeType":"VariableDeclaration","scope":1122,"src":"20670:23:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1095,"name":"bytes32","nodeType":"ElementaryTypeName","src":"20670:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1096,"nodeType":"ArrayTypeName","src":"20670:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":1107,"mutability":"mutable","name":"hasher","nameLocation":"20753:6:3","nodeType":"VariableDeclaration","scope":1122,"src":"20703:56:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"},"typeName":{"id":1106,"nodeType":"FunctionTypeName","parameterTypes":{"id":1102,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1099,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1106,"src":"20712:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1098,"name":"bytes32","nodeType":"ElementaryTypeName","src":"20712:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1101,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1106,"src":"20721:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1100,"name":"bytes32","nodeType":"ElementaryTypeName","src":"20721:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"20711:18:3"},"returnParameterTypes":{"id":1105,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1104,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1106,"src":"20744:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1103,"name":"bytes32","nodeType":"ElementaryTypeName","src":"20744:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"20743:9:3"},"src":"20703:56:3","stateMutability":"view","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"},"visibility":"internal"},"visibility":"internal"}],"src":"20568:197:3"},"returnParameters":{"id":1111,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1110,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1122,"src":"20789:4:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1109,"name":"bool","nodeType":"ElementaryTypeName","src":"20789:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"20788:6:3"},"scope":1290,"src":"20535:352:3","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1288,"nodeType":"Block","src":"22250:2083:3","statements":[{"assignments":[1148],"declarations":[{"constant":false,"id":1148,"mutability":"mutable","name":"leavesLen","nameLocation":"22642:9:3","nodeType":"VariableDeclaration","scope":1288,"src":"22634:17:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1147,"name":"uint256","nodeType":"ElementaryTypeName","src":"22634:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1151,"initialValue":{"expression":{"id":1149,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1132,"src":"22654:6:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1150,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"22661:6:3","memberName":"length","nodeType":"MemberAccess","src":"22654:13:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"22634:33:3"},{"assignments":[1153],"declarations":[{"constant":false,"id":1153,"mutability":"mutable","name":"proofFlagsLen","nameLocation":"22685:13:3","nodeType":"VariableDeclaration","scope":1288,"src":"22677:21:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1152,"name":"uint256","nodeType":"ElementaryTypeName","src":"22677:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1156,"initialValue":{"expression":{"id":1154,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1129,"src":"22701:10:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[] calldata"}},"id":1155,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"22712:6:3","memberName":"length","nodeType":"MemberAccess","src":"22701:17:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"22677:41:3"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1164,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1160,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1157,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1148,"src":"22766:9:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"expression":{"id":1158,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1126,"src":"22778:5:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":1159,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"22784:6:3","memberName":"length","nodeType":"MemberAccess","src":"22778:12:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"22766:24:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1163,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1161,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1153,"src":"22794:13:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1162,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"22810:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"22794:17:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"22766:45:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1169,"nodeType":"IfStatement","src":"22762:113:3","trueBody":{"id":1168,"nodeType":"Block","src":"22813:62:3","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":1165,"name":"MerkleProofInvalidMultiproof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":225,"src":"22834:28:3","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":1166,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"22834:30:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":1167,"nodeType":"RevertStatement","src":"22827:37:3"}]}},{"assignments":[1174],"declarations":[{"constant":false,"id":1174,"mutability":"mutable","name":"hashes","nameLocation":"23136:6:3","nodeType":"VariableDeclaration","scope":1288,"src":"23119:23:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1172,"name":"bytes32","nodeType":"ElementaryTypeName","src":"23119:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1173,"nodeType":"ArrayTypeName","src":"23119:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"id":1180,"initialValue":{"arguments":[{"id":1178,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1153,"src":"23159:13:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1177,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"23145:13:3","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (bytes32[] memory)"},"typeName":{"baseType":{"id":1175,"name":"bytes32","nodeType":"ElementaryTypeName","src":"23149:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1176,"nodeType":"ArrayTypeName","src":"23149:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}}},"id":1179,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"23145:28:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"nodeType":"VariableDeclarationStatement","src":"23119:54:3"},{"assignments":[1182],"declarations":[{"constant":false,"id":1182,"mutability":"mutable","name":"leafPos","nameLocation":"23191:7:3","nodeType":"VariableDeclaration","scope":1288,"src":"23183:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1181,"name":"uint256","nodeType":"ElementaryTypeName","src":"23183:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1184,"initialValue":{"hexValue":"30","id":1183,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"23201:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"23183:19:3"},{"assignments":[1186],"declarations":[{"constant":false,"id":1186,"mutability":"mutable","name":"hashPos","nameLocation":"23220:7:3","nodeType":"VariableDeclaration","scope":1288,"src":"23212:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1185,"name":"uint256","nodeType":"ElementaryTypeName","src":"23212:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1188,"initialValue":{"hexValue":"30","id":1187,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"23230:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"23212:19:3"},{"assignments":[1190],"declarations":[{"constant":false,"id":1190,"mutability":"mutable","name":"proofPos","nameLocation":"23249:8:3","nodeType":"VariableDeclaration","scope":1288,"src":"23241:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1189,"name":"uint256","nodeType":"ElementaryTypeName","src":"23241:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1192,"initialValue":{"hexValue":"30","id":1191,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"23260:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"23241:20:3"},{"body":{"id":1251,"nodeType":"Block","src":"23681:289:3","statements":[{"assignments":[1204],"declarations":[{"constant":false,"id":1204,"mutability":"mutable","name":"a","nameLocation":"23703:1:3","nodeType":"VariableDeclaration","scope":1251,"src":"23695:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1203,"name":"bytes32","nodeType":"ElementaryTypeName","src":"23695:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1217,"initialValue":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1207,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1205,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1182,"src":"23707:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1206,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1148,"src":"23717:9:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"23707:19:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":1212,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1174,"src":"23749:6:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1215,"indexExpression":{"id":1214,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"23756:9:3","subExpression":{"id":1213,"name":"hashPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1186,"src":"23756:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"23749:17:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1216,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"23707:59:3","trueExpression":{"baseExpression":{"id":1208,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1132,"src":"23729:6:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1211,"indexExpression":{"id":1210,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"23736:9:3","subExpression":{"id":1209,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1182,"src":"23736:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"23729:17:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"23695:71:3"},{"assignments":[1219],"declarations":[{"constant":false,"id":1219,"mutability":"mutable","name":"b","nameLocation":"23788:1:3","nodeType":"VariableDeclaration","scope":1251,"src":"23780:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1218,"name":"bytes32","nodeType":"ElementaryTypeName","src":"23780:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1241,"initialValue":{"condition":{"baseExpression":{"id":1220,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1129,"src":"23792:10:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[] calldata"}},"id":1222,"indexExpression":{"id":1221,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1194,"src":"23803:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"23792:13:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":1236,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1126,"src":"23904:5:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":1239,"indexExpression":{"id":1238,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"23910:10:3","subExpression":{"id":1237,"name":"proofPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1190,"src":"23910:8:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"23904:17:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1240,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"23792:129:3","trueExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1225,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1223,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1182,"src":"23825:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1224,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1148,"src":"23835:9:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"23825:19:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":1230,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1174,"src":"23867:6:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1233,"indexExpression":{"id":1232,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"23874:9:3","subExpression":{"id":1231,"name":"hashPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1186,"src":"23874:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"23867:17:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1234,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"23825:59:3","trueExpression":{"baseExpression":{"id":1226,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1132,"src":"23847:6:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1229,"indexExpression":{"id":1228,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"23854:9:3","subExpression":{"id":1227,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1182,"src":"23854:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"23847:17:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":1235,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"23824:61:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"23780:141:3"},{"expression":{"id":1249,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1242,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1174,"src":"23935:6:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1244,"indexExpression":{"id":1243,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1194,"src":"23942:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"23935:9:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":1246,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1204,"src":"23954:1:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1247,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1219,"src":"23957:1:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1245,"name":"hasher","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1142,"src":"23947:6:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"}},"id":1248,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"23947:12:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"23935:24:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1250,"nodeType":"ExpressionStatement","src":"23935:24:3"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1199,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1197,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1194,"src":"23657:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1198,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1153,"src":"23661:13:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"23657:17:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1252,"initializationExpression":{"assignments":[1194],"declarations":[{"constant":false,"id":1194,"mutability":"mutable","name":"i","nameLocation":"23650:1:3","nodeType":"VariableDeclaration","scope":1252,"src":"23642:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1193,"name":"uint256","nodeType":"ElementaryTypeName","src":"23642:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1196,"initialValue":{"hexValue":"30","id":1195,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"23654:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"23642:13:3"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":1201,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"23676:3:3","subExpression":{"id":1200,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1194,"src":"23676:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1202,"nodeType":"ExpressionStatement","src":"23676:3:3"},"nodeType":"ForStatement","src":"23637:333:3"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1255,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1253,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1153,"src":"23984:13:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1254,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24000:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"23984:17:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1275,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1273,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1148,"src":"24225:9:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1274,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24237:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"24225:13:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1285,"nodeType":"Block","src":"24287:40:3","statements":[{"expression":{"baseExpression":{"id":1281,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1126,"src":"24308:5:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":1283,"indexExpression":{"hexValue":"30","id":1282,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24314:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"24308:8:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1146,"id":1284,"nodeType":"Return","src":"24301:15:3"}]},"id":1286,"nodeType":"IfStatement","src":"24221:106:3","trueBody":{"id":1280,"nodeType":"Block","src":"24240:41:3","statements":[{"expression":{"baseExpression":{"id":1276,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1132,"src":"24261:6:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1278,"indexExpression":{"hexValue":"30","id":1277,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24268:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"24261:9:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1146,"id":1279,"nodeType":"Return","src":"24254:16:3"}]}},"id":1287,"nodeType":"IfStatement","src":"23980:347:3","trueBody":{"id":1272,"nodeType":"Block","src":"24003:212:3","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1259,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1256,"name":"proofPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1190,"src":"24021:8:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":1257,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1126,"src":"24033:5:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":1258,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"24039:6:3","memberName":"length","nodeType":"MemberAccess","src":"24033:12:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"24021:24:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1264,"nodeType":"IfStatement","src":"24017:100:3","trueBody":{"id":1263,"nodeType":"Block","src":"24047:70:3","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":1260,"name":"MerkleProofInvalidMultiproof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":225,"src":"24072:28:3","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":1261,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"24072:30:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":1262,"nodeType":"RevertStatement","src":"24065:37:3"}]}},{"id":1271,"nodeType":"UncheckedBlock","src":"24130:75:3","statements":[{"expression":{"baseExpression":{"id":1265,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1174,"src":"24165:6:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1269,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1268,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1266,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1153,"src":"24172:13:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":1267,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24188:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"24172:17:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"24165:25:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1146,"id":1270,"nodeType":"Return","src":"24158:32:3"}]}]}}]},"documentation":{"id":1123,"nodeType":"StructuredDocumentation","src":"20893:1099:3","text":" @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n respectively.\n This version handles multiproofs in calldata with a custom hashing function.\n CAUTION: Not all Merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n NOTE: The _empty set_ (i.e. the case where `proof.length == 1 && leaves.length == 0`) is considered a no-op,\n and therefore a valid multiproof (i.e. it returns `proof[0]`). Consider disallowing this case if you're not\n validating the leaves elsewhere."},"id":1289,"implemented":true,"kind":"function","modifiers":[],"name":"processMultiProofCalldata","nameLocation":"22006:25:3","nodeType":"FunctionDefinition","parameters":{"id":1143,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1126,"mutability":"mutable","name":"proof","nameLocation":"22060:5:3","nodeType":"VariableDeclaration","scope":1289,"src":"22041:24:3","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1124,"name":"bytes32","nodeType":"ElementaryTypeName","src":"22041:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1125,"nodeType":"ArrayTypeName","src":"22041:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":1129,"mutability":"mutable","name":"proofFlags","nameLocation":"22091:10:3","nodeType":"VariableDeclaration","scope":1289,"src":"22075:26:3","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":1127,"name":"bool","nodeType":"ElementaryTypeName","src":"22075:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1128,"nodeType":"ArrayTypeName","src":"22075:6:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"},{"constant":false,"id":1132,"mutability":"mutable","name":"leaves","nameLocation":"22128:6:3","nodeType":"VariableDeclaration","scope":1289,"src":"22111:23:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1130,"name":"bytes32","nodeType":"ElementaryTypeName","src":"22111:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1131,"nodeType":"ArrayTypeName","src":"22111:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":1142,"mutability":"mutable","name":"hasher","nameLocation":"22194:6:3","nodeType":"VariableDeclaration","scope":1289,"src":"22144:56:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"},"typeName":{"id":1141,"nodeType":"FunctionTypeName","parameterTypes":{"id":1137,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1134,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1141,"src":"22153:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1133,"name":"bytes32","nodeType":"ElementaryTypeName","src":"22153:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1136,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1141,"src":"22162:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1135,"name":"bytes32","nodeType":"ElementaryTypeName","src":"22162:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"22152:18:3"},"returnParameterTypes":{"id":1140,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1139,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1141,"src":"22185:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1138,"name":"bytes32","nodeType":"ElementaryTypeName","src":"22185:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"22184:9:3"},"src":"22144:56:3","stateMutability":"view","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"},"visibility":"internal"},"visibility":"internal"}],"src":"22031:175:3"},"returnParameters":{"id":1146,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1145,"mutability":"mutable","name":"merkleRoot","nameLocation":"22238:10:3","nodeType":"VariableDeclaration","scope":1289,"src":"22230:18:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1144,"name":"bytes32","nodeType":"ElementaryTypeName","src":"22230:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"22229:20:3"},"scope":1290,"src":"21997:2336:3","stateMutability":"view","virtual":false,"visibility":"internal"}],"scope":1291,"src":"1353:22982:3","usedErrors":[225],"usedEvents":[]}],"src":"206:24130:3"},"id":3},"contracts/MerkleProofVerification.sol":{"ast":{"absolutePath":"contracts/MerkleProofVerification.sol","exportedSymbols":{"Context":[177],"Hashes":[217],"MerkleProof":[1290],"MerkleProofVerification":[1337],"Ownable":[147]},"id":1338,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1292,"literals":["solidity","^","0.8",".27"],"nodeType":"PragmaDirective","src":"33:24:4"},{"absolutePath":"@openzeppelin/contracts/access/Ownable.sol","file":"@openzeppelin/contracts/access/Ownable.sol","id":1293,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1338,"sourceUnit":148,"src":"61:52:4","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol","file":"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol","id":1294,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1338,"sourceUnit":1291,"src":"115:68:4","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":1295,"name":"Ownable","nameLocations":["223:7:4"],"nodeType":"IdentifierPath","referencedDeclaration":147,"src":"223:7:4"},"id":1296,"nodeType":"InheritanceSpecifier","src":"223:7:4"}],"canonicalName":"MerkleProofVerification","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":1337,"linearizedBaseContracts":[1337,147,177],"name":"MerkleProofVerification","nameLocation":"196:23:4","nodeType":"ContractDefinition","nodes":[{"constant":false,"functionSelector":"2eb4a7ab","id":1298,"mutability":"mutable","name":"merkleRoot","nameLocation":"295:10:4","nodeType":"VariableDeclaration","scope":1337,"src":"280:25:4","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1297,"name":"bytes32","nodeType":"ElementaryTypeName","src":"280:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"public"},{"body":{"id":1305,"nodeType":"Block","src":"418:51:4","statements":[]},"id":1306,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"expression":{"id":1301,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"406:3:4","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1302,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"410:6:4","memberName":"sender","nodeType":"MemberAccess","src":"406:10:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":1303,"kind":"baseConstructorSpecifier","modifierName":{"id":1300,"name":"Ownable","nameLocations":["398:7:4"],"nodeType":"IdentifierPath","referencedDeclaration":147,"src":"398:7:4"},"nodeType":"ModifierInvocation","src":"398:19:4"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":1299,"nodeType":"ParameterList","parameters":[],"src":"395:2:4"},"returnParameters":{"id":1304,"nodeType":"ParameterList","parameters":[],"src":"418:0:4"},"scope":1337,"src":"384:85:4","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":1317,"nodeType":"Block","src":"618:43:4","statements":[{"expression":{"id":1315,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1313,"name":"merkleRoot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1298,"src":"629:10:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1314,"name":"_merkleRoot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1308,"src":"642:11:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"629:24:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1316,"nodeType":"ExpressionStatement","src":"629:24:4"}]},"functionSelector":"7cb64759","id":1318,"implemented":true,"kind":"function","modifiers":[{"id":1311,"kind":"modifierInvocation","modifierName":{"id":1310,"name":"onlyOwner","nameLocations":["608:9:4"],"nodeType":"IdentifierPath","referencedDeclaration":58,"src":"608:9:4"},"nodeType":"ModifierInvocation","src":"608:9:4"}],"name":"setMerkleRoot","nameLocation":"566:13:4","nodeType":"FunctionDefinition","parameters":{"id":1309,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1308,"mutability":"mutable","name":"_merkleRoot","nameLocation":"588:11:4","nodeType":"VariableDeclaration","scope":1318,"src":"580:19:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1307,"name":"bytes32","nodeType":"ElementaryTypeName","src":"580:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"579:21:4"},"returnParameters":{"id":1312,"nodeType":"ParameterList","parameters":[],"src":"618:0:4"},"scope":1337,"src":"557:104:4","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":1335,"nodeType":"Block","src":"963:69:4","statements":[{"expression":{"arguments":[{"id":1330,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1321,"src":"1000:5:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},{"id":1331,"name":"merkleRoot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1298,"src":"1007:10:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1332,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1323,"src":"1019:4:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":1328,"name":"MerkleProof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1290,"src":"981:11:4","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_MerkleProof_$1290_$","typeString":"type(library MerkleProof)"}},"id":1329,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"993:6:4","memberName":"verify","nodeType":"MemberAccess","referencedDeclaration":246,"src":"981:18:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_bytes32_$_t_bytes32_$returns$_t_bool_$","typeString":"function (bytes32[] memory,bytes32,bytes32) pure returns (bool)"}},"id":1333,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"981:43:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1327,"id":1334,"nodeType":"Return","src":"974:50:4"}]},"functionSelector":"896f2887","id":1336,"implemented":true,"kind":"function","modifiers":[],"name":"verifyTransactionInclusion","nameLocation":"754:26:4","nodeType":"FunctionDefinition","parameters":{"id":1324,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1321,"mutability":"mutable","name":"proof","nameLocation":"808:5:4","nodeType":"VariableDeclaration","scope":1336,"src":"791:22:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1319,"name":"bytes32","nodeType":"ElementaryTypeName","src":"791:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1320,"nodeType":"ArrayTypeName","src":"791:9:4","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":1323,"mutability":"mutable","name":"leaf","nameLocation":"870:4:4","nodeType":"VariableDeclaration","scope":1336,"src":"862:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1322,"name":"bytes32","nodeType":"ElementaryTypeName","src":"862:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"780:155:4"},"returnParameters":{"id":1327,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1326,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1336,"src":"957:4:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1325,"name":"bool","nodeType":"ElementaryTypeName","src":"957:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"956:6:4"},"scope":1337,"src":"745:287:4","stateMutability":"view","virtual":false,"visibility":"public"}],"scope":1338,"src":"187:848:4","usedErrors":[13,18],"usedEvents":[24]}],"src":"33:1002:4"},"id":4}},"contracts":{"@openzeppelin/contracts/access/Ownable.sol":{"Ownable":{"abi":[{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"OwnableInvalidOwner","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"OwnableUnauthorizedAccount","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"methodIdentifiers":{"owner()":"8da5cb5b","renounceOwnership()":"715018a6","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. The initial owner is set to the address provided by the deployer. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the contract setting the address provided by the deployer as the initial owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/access/Ownable.sol\":\"Ownable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8ed324d3920bb545059d66ab97d43e43ee85fd3bd52e03e401f020afb0b120f6\",\"dweb:/ipfs/QmfEckWLmZkDDcoWrkEvMWhms66xwTLff9DDhegYpvHo1a\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]}},\"version\":1}"}},"@openzeppelin/contracts/utils/Context.sol":{"Context":{"abi":[],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]}},\"version\":1}"}},"@openzeppelin/contracts/utils/cryptography/Hashes.sol":{"Hashes":{"abi":[],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220195adb90afd663f7b10506f5b07f672cbbdd097ab10fd326d55431f3be7247e664736f6c634300081b0033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 NOT GAS 0xDB SWAP1 0xAF 0xD6 PUSH4 0xF7B10506 CREATE2 0xB0 PUSH32 0x672CBBDD097AB10FD326D55431F3BE7247E664736F6C634300081B0033000000 ","sourceMap":"221:813:2:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220195adb90afd663f7b10506f5b07f672cbbdd097ab10fd326d55431f3be7247e664736f6c634300081b0033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 NOT GAS 0xDB SWAP1 0xAF 0xD6 PUSH4 0xF7B10506 CREATE2 0xB0 PUSH32 0x672CBBDD097AB10FD326D55431F3BE7247E664736F6C634300081B0033000000 ","sourceMap":"221:813:2:-:0;;;;;;;;"},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Library of standard hash functions. _Available since v5.1._\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/cryptography/Hashes.sol\":\"Hashes\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/cryptography/Hashes.sol\":{\"keccak256\":\"0x631dc1958d5308bd2d9f91190bbcde4f9ffb9d9401ce8d358c17b35f1a942bb7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e7ef16d9a6f57eae9ab275116eaba1e8de70efd3d0e3682b1585b8f069d9c3f9\",\"dweb:/ipfs/QmR3JQHAyv4sNWnRHeiC6oaz8Bqn8rtzu5sdAqAJRtBqpj\"]}},\"version\":1}"}},"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol":{"MerkleProof":{"abi":[{"inputs":[],"name":"MerkleProofInvalidMultiproof","type":"error"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220344dd0fbb4a5437f5619e59b443c75a87384f6d44579fe3852ee91a2c4cb7bd664736f6c634300081b0033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CALLVALUE 0x4D 0xD0 0xFB 0xB4 0xA5 NUMBER PUSH32 0x5619E59B443C75A87384F6D44579FE3852EE91A2C4CB7BD664736F6C63430008 SHL STOP CALLER ","sourceMap":"1353:22982:3:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220344dd0fbb4a5437f5619e59b443c75a87384f6d44579fe3852ee91a2c4cb7bd664736f6c634300081b0033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CALLVALUE 0x4D 0xD0 0xFB 0xB4 0xA5 NUMBER PUSH32 0x5619E59B443C75A87384F6D44579FE3852EE91A2C4CB7BD664736F6C63430008 SHL STOP CALLER ","sourceMap":"1353:22982:3:-:0;;;;;;;;"},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"MerkleProofInvalidMultiproof\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"These functions deal with verification of Merkle Tree proofs. The tree and the proofs can be generated using our https://github.com/OpenZeppelin/merkle-tree[JavaScript library]. You will find a quickstart guide in the readme. WARNING: You should avoid using leaf values that are 64 bytes long prior to hashing, or use a hash function other than keccak256 for hashing leaves. This is because the concatenation of a sorted pair of internal nodes in the Merkle tree could be reinterpreted as a leaf value. OpenZeppelin's JavaScript library generates Merkle trees that are safe against this attack out of the box. IMPORTANT: Consider memory side-effects when using custom hashing functions that access memory in an unsafe way. NOTE: This library supports proof verification for merkle trees built using custom _commutative_ hashing functions (i.e. `H(a, b) == H(b, a)`). Proving leaf inclusion in trees built using non-commutative hashing functions requires additional logic that is not supported by this library.\",\"errors\":{\"MerkleProofInvalidMultiproof()\":[{\"details\":\"The multiproof provided is not valid.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":\"MerkleProof\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/cryptography/Hashes.sol\":{\"keccak256\":\"0x631dc1958d5308bd2d9f91190bbcde4f9ffb9d9401ce8d358c17b35f1a942bb7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e7ef16d9a6f57eae9ab275116eaba1e8de70efd3d0e3682b1585b8f069d9c3f9\",\"dweb:/ipfs/QmR3JQHAyv4sNWnRHeiC6oaz8Bqn8rtzu5sdAqAJRtBqpj\"]},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"keccak256\":\"0x36a0c409c437a753cac9b92b75f93b0fbe92803bf2c8ff1517e54b247f166134\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0f91ba472de411aa557cdbf6560c40750d87bd11c9060bc04d2ba7119af9d5a6\",\"dweb:/ipfs/QmQjtYo2i7dDvzCEzZ67bDoNSG4RrwMoxPWuqFmX5Xzpuw\"]}},\"version\":1}"}},"contracts/MerkleProofVerification.sol":{"MerkleProofVerification":{"abi":[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"OwnableInvalidOwner","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"OwnableUnauthorizedAccount","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"merkleRoot","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_merkleRoot","type":"bytes32"}],"name":"setMerkleRoot","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32[]","name":"proof","type":"bytes32[]"},{"internalType":"bytes32","name":"leaf","type":"bytes32"}],"name":"verifyTransactionInclusion","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"evm":{"bytecode":{"functionDebugData":{"@_1306":{"entryPoint":null,"id":1306,"parameterSlots":0,"returnSlots":0},"@_50":{"entryPoint":null,"id":50,"parameterSlots":1,"returnSlots":0},"@_transferOwnership_146":{"entryPoint":153,"id":146,"parameterSlots":1,"returnSlots":0},"abi_encode_t_address_to_t_address_fromStack":{"entryPoint":399,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":414,"id":null,"parameterSlots":2,"returnSlots":1},"cleanup_t_address":{"entryPoint":381,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":349,"id":null,"parameterSlots":1,"returnSlots":1}},"generatedSources":[{"ast":{"nativeSrc":"0:590:5","nodeType":"YulBlock","src":"0:590:5","statements":[{"body":{"nativeSrc":"52:81:5","nodeType":"YulBlock","src":"52:81:5","statements":[{"nativeSrc":"62:65:5","nodeType":"YulAssignment","src":"62:65:5","value":{"arguments":[{"name":"value","nativeSrc":"77:5:5","nodeType":"YulIdentifier","src":"77:5:5"},{"kind":"number","nativeSrc":"84:42:5","nodeType":"YulLiteral","src":"84:42:5","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"73:3:5","nodeType":"YulIdentifier","src":"73:3:5"},"nativeSrc":"73:54:5","nodeType":"YulFunctionCall","src":"73:54:5"},"variableNames":[{"name":"cleaned","nativeSrc":"62:7:5","nodeType":"YulIdentifier","src":"62:7:5"}]}]},"name":"cleanup_t_uint160","nativeSrc":"7:126:5","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"34:5:5","nodeType":"YulTypedName","src":"34:5:5","type":""}],"returnVariables":[{"name":"cleaned","nativeSrc":"44:7:5","nodeType":"YulTypedName","src":"44:7:5","type":""}],"src":"7:126:5"},{"body":{"nativeSrc":"184:51:5","nodeType":"YulBlock","src":"184:51:5","statements":[{"nativeSrc":"194:35:5","nodeType":"YulAssignment","src":"194:35:5","value":{"arguments":[{"name":"value","nativeSrc":"223:5:5","nodeType":"YulIdentifier","src":"223:5:5"}],"functionName":{"name":"cleanup_t_uint160","nativeSrc":"205:17:5","nodeType":"YulIdentifier","src":"205:17:5"},"nativeSrc":"205:24:5","nodeType":"YulFunctionCall","src":"205:24:5"},"variableNames":[{"name":"cleaned","nativeSrc":"194:7:5","nodeType":"YulIdentifier","src":"194:7:5"}]}]},"name":"cleanup_t_address","nativeSrc":"139:96:5","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"166:5:5","nodeType":"YulTypedName","src":"166:5:5","type":""}],"returnVariables":[{"name":"cleaned","nativeSrc":"176:7:5","nodeType":"YulTypedName","src":"176:7:5","type":""}],"src":"139:96:5"},{"body":{"nativeSrc":"306:53:5","nodeType":"YulBlock","src":"306:53:5","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"323:3:5","nodeType":"YulIdentifier","src":"323:3:5"},{"arguments":[{"name":"value","nativeSrc":"346:5:5","nodeType":"YulIdentifier","src":"346:5:5"}],"functionName":{"name":"cleanup_t_address","nativeSrc":"328:17:5","nodeType":"YulIdentifier","src":"328:17:5"},"nativeSrc":"328:24:5","nodeType":"YulFunctionCall","src":"328:24:5"}],"functionName":{"name":"mstore","nativeSrc":"316:6:5","nodeType":"YulIdentifier","src":"316:6:5"},"nativeSrc":"316:37:5","nodeType":"YulFunctionCall","src":"316:37:5"},"nativeSrc":"316:37:5","nodeType":"YulExpressionStatement","src":"316:37:5"}]},"name":"abi_encode_t_address_to_t_address_fromStack","nativeSrc":"241:118:5","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"294:5:5","nodeType":"YulTypedName","src":"294:5:5","type":""},{"name":"pos","nativeSrc":"301:3:5","nodeType":"YulTypedName","src":"301:3:5","type":""}],"src":"241:118:5"},{"body":{"nativeSrc":"463:124:5","nodeType":"YulBlock","src":"463:124:5","statements":[{"nativeSrc":"473:26:5","nodeType":"YulAssignment","src":"473:26:5","value":{"arguments":[{"name":"headStart","nativeSrc":"485:9:5","nodeType":"YulIdentifier","src":"485:9:5"},{"kind":"number","nativeSrc":"496:2:5","nodeType":"YulLiteral","src":"496:2:5","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"481:3:5","nodeType":"YulIdentifier","src":"481:3:5"},"nativeSrc":"481:18:5","nodeType":"YulFunctionCall","src":"481:18:5"},"variableNames":[{"name":"tail","nativeSrc":"473:4:5","nodeType":"YulIdentifier","src":"473:4:5"}]},{"expression":{"arguments":[{"name":"value0","nativeSrc":"553:6:5","nodeType":"YulIdentifier","src":"553:6:5"},{"arguments":[{"name":"headStart","nativeSrc":"566:9:5","nodeType":"YulIdentifier","src":"566:9:5"},{"kind":"number","nativeSrc":"577:1:5","nodeType":"YulLiteral","src":"577:1:5","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"562:3:5","nodeType":"YulIdentifier","src":"562:3:5"},"nativeSrc":"562:17:5","nodeType":"YulFunctionCall","src":"562:17:5"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nativeSrc":"509:43:5","nodeType":"YulIdentifier","src":"509:43:5"},"nativeSrc":"509:71:5","nodeType":"YulFunctionCall","src":"509:71:5"},"nativeSrc":"509:71:5","nodeType":"YulExpressionStatement","src":"509:71:5"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nativeSrc":"365:222:5","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"435:9:5","nodeType":"YulTypedName","src":"435:9:5","type":""},{"name":"value0","nativeSrc":"447:6:5","nodeType":"YulTypedName","src":"447:6:5","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"458:4:5","nodeType":"YulTypedName","src":"458:4:5","type":""}],"src":"365:222:5"}]},"contents":"{\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n}\n","id":5,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"608060405234801561001057600080fd5b5033600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036100845760006040517f1e4fbdf700000000000000000000000000000000000000000000000000000000815260040161007b919061019e565b60405180910390fd5b6100938161009960201b60201c565b506101b9565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006101888261015d565b9050919050565b6101988161017d565b82525050565b60006020820190506101b3600083018461018f565b92915050565b6107a9806101c86000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80632eb4a7ab14610067578063715018a6146100855780637cb647591461008f578063896f2887146100ab5780638da5cb5b146100db578063f2fde38b146100f9575b600080fd5b61006f610115565b60405161007c919061041c565b60405180910390f35b61008d61011b565b005b6100a960048036038101906100a49190610477565b61012f565b005b6100c560048036038101906100c091906105fd565b610141565b6040516100d29190610674565b60405180910390f35b6100e3610158565b6040516100f091906106d0565b60405180910390f35b610113600480360381019061010e9190610717565b610181565b005b60015481565b610123610207565b61012d600061028e565b565b610137610207565b8060018190555050565b60006101508360015484610352565b905092915050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610189610207565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036101fb5760006040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016101f291906106d0565b60405180910390fd5b6102048161028e565b50565b61020f610369565b73ffffffffffffffffffffffffffffffffffffffff1661022d610158565b73ffffffffffffffffffffffffffffffffffffffff161461028c57610250610369565b6040517f118cdaa700000000000000000000000000000000000000000000000000000000815260040161028391906106d0565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60008261035f8584610371565b1490509392505050565b600033905090565b60008082905060005b84518110156103b6576103a78286838151811061039a57610399610744565b5b60200260200101516103c1565b9150808060010191505061037a565b508091505092915050565b60008183106103d9576103d482846103ec565b6103e4565b6103e383836103ec565b5b905092915050565b600082600052816020526040600020905092915050565b6000819050919050565b61041681610403565b82525050565b6000602082019050610431600083018461040d565b92915050565b6000604051905090565b600080fd5b600080fd5b61045481610403565b811461045f57600080fd5b50565b6000813590506104718161044b565b92915050565b60006020828403121561048d5761048c610441565b5b600061049b84828501610462565b91505092915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6104f2826104a9565b810181811067ffffffffffffffff82111715610511576105106104ba565b5b80604052505050565b6000610524610437565b905061053082826104e9565b919050565b600067ffffffffffffffff8211156105505761054f6104ba565b5b602082029050602081019050919050565b600080fd5b600061057961057484610535565b61051a565b9050808382526020820190506020840283018581111561059c5761059b610561565b5b835b818110156105c557806105b18882610462565b84526020840193505060208101905061059e565b5050509392505050565b600082601f8301126105e4576105e36104a4565b5b81356105f4848260208601610566565b91505092915050565b6000806040838503121561061457610613610441565b5b600083013567ffffffffffffffff81111561063257610631610446565b5b61063e858286016105cf565b925050602061064f85828601610462565b9150509250929050565b60008115159050919050565b61066e81610659565b82525050565b60006020820190506106896000830184610665565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006106ba8261068f565b9050919050565b6106ca816106af565b82525050565b60006020820190506106e560008301846106c1565b92915050565b6106f4816106af565b81146106ff57600080fd5b50565b600081359050610711816106eb565b92915050565b60006020828403121561072d5761072c610441565b5b600061073b84828501610702565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fdfea26469706673582212202b417ff5b51626186c7ac2cb19f11c9ac16d173fc0ec1827a40ad6c74155ce8264736f6c634300081b0033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLER PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x84 JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0x1E4FBDF700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x7B SWAP2 SWAP1 PUSH2 0x19E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x93 DUP2 PUSH2 0x99 PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST POP PUSH2 0x1B9 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x188 DUP3 PUSH2 0x15D JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x198 DUP2 PUSH2 0x17D JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1B3 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x18F JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x7A9 DUP1 PUSH2 0x1C8 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x62 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x2EB4A7AB EQ PUSH2 0x67 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x85 JUMPI DUP1 PUSH4 0x7CB64759 EQ PUSH2 0x8F JUMPI DUP1 PUSH4 0x896F2887 EQ PUSH2 0xAB JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0xDB JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0xF9 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x6F PUSH2 0x115 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x7C SWAP2 SWAP1 PUSH2 0x41C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x8D PUSH2 0x11B JUMP JUMPDEST STOP JUMPDEST PUSH2 0xA9 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xA4 SWAP2 SWAP1 PUSH2 0x477 JUMP JUMPDEST PUSH2 0x12F JUMP JUMPDEST STOP JUMPDEST PUSH2 0xC5 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xC0 SWAP2 SWAP1 PUSH2 0x5FD JUMP JUMPDEST PUSH2 0x141 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xD2 SWAP2 SWAP1 PUSH2 0x674 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xE3 PUSH2 0x158 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xF0 SWAP2 SWAP1 PUSH2 0x6D0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x113 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x10E SWAP2 SWAP1 PUSH2 0x717 JUMP JUMPDEST PUSH2 0x181 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x1 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x123 PUSH2 0x207 JUMP JUMPDEST PUSH2 0x12D PUSH1 0x0 PUSH2 0x28E JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x137 PUSH2 0x207 JUMP JUMPDEST DUP1 PUSH1 0x1 DUP2 SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x150 DUP4 PUSH1 0x1 SLOAD DUP5 PUSH2 0x352 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x189 PUSH2 0x207 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1FB JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0x1E4FBDF700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1F2 SWAP2 SWAP1 PUSH2 0x6D0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x204 DUP2 PUSH2 0x28E JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x20F PUSH2 0x369 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x22D PUSH2 0x158 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x28C JUMPI PUSH2 0x250 PUSH2 0x369 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x118CDAA700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x283 SWAP2 SWAP1 PUSH2 0x6D0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x35F DUP6 DUP5 PUSH2 0x371 JUMP JUMPDEST EQ SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 SWAP1 POP PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x3B6 JUMPI PUSH2 0x3A7 DUP3 DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x39A JUMPI PUSH2 0x399 PUSH2 0x744 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x3C1 JUMP JUMPDEST SWAP2 POP DUP1 DUP1 PUSH1 0x1 ADD SWAP2 POP POP PUSH2 0x37A JUMP JUMPDEST POP DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 LT PUSH2 0x3D9 JUMPI PUSH2 0x3D4 DUP3 DUP5 PUSH2 0x3EC JUMP JUMPDEST PUSH2 0x3E4 JUMP JUMPDEST PUSH2 0x3E3 DUP4 DUP4 PUSH2 0x3EC JUMP JUMPDEST JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x0 MSTORE DUP2 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x416 DUP2 PUSH2 0x403 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x431 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x40D JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x454 DUP2 PUSH2 0x403 JUMP JUMPDEST DUP2 EQ PUSH2 0x45F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x471 DUP2 PUSH2 0x44B JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x48D JUMPI PUSH2 0x48C PUSH2 0x441 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x49B DUP5 DUP3 DUP6 ADD PUSH2 0x462 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x4F2 DUP3 PUSH2 0x4A9 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x511 JUMPI PUSH2 0x510 PUSH2 0x4BA JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x524 PUSH2 0x437 JUMP JUMPDEST SWAP1 POP PUSH2 0x530 DUP3 DUP3 PUSH2 0x4E9 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x550 JUMPI PUSH2 0x54F PUSH2 0x4BA JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP3 MUL SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x579 PUSH2 0x574 DUP5 PUSH2 0x535 JUMP JUMPDEST PUSH2 0x51A JUMP JUMPDEST SWAP1 POP DUP1 DUP4 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH1 0x20 DUP5 MUL DUP4 ADD DUP6 DUP2 GT ISZERO PUSH2 0x59C JUMPI PUSH2 0x59B PUSH2 0x561 JUMP JUMPDEST JUMPDEST DUP4 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x5C5 JUMPI DUP1 PUSH2 0x5B1 DUP9 DUP3 PUSH2 0x462 JUMP JUMPDEST DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x59E JUMP JUMPDEST POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x5E4 JUMPI PUSH2 0x5E3 PUSH2 0x4A4 JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x5F4 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x566 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x614 JUMPI PUSH2 0x613 PUSH2 0x441 JUMP JUMPDEST JUMPDEST PUSH1 0x0 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x632 JUMPI PUSH2 0x631 PUSH2 0x446 JUMP JUMPDEST JUMPDEST PUSH2 0x63E DUP6 DUP3 DUP7 ADD PUSH2 0x5CF JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x64F DUP6 DUP3 DUP7 ADD PUSH2 0x462 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x66E DUP2 PUSH2 0x659 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x689 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x665 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x6BA DUP3 PUSH2 0x68F JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x6CA DUP2 PUSH2 0x6AF JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x6E5 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x6C1 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x6F4 DUP2 PUSH2 0x6AF JUMP JUMPDEST DUP2 EQ PUSH2 0x6FF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x711 DUP2 PUSH2 0x6EB JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x72D JUMPI PUSH2 0x72C PUSH2 0x441 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x73B DUP5 DUP3 DUP6 ADD PUSH2 0x702 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x2B COINBASE PUSH32 0xF5B51626186C7AC2CB19F11C9AC16D173FC0EC1827A40AD6C74155CE8264736F PUSH13 0x634300081B0033000000000000 ","sourceMap":"187:848:4:-:0;;;384:85;;;;;;;;;;406:10;1297:1:0;1273:26;;:12;:26;;;1269:95;;1350:1;1322:31;;;;;;;;;;;:::i;:::-;;;;;;;;1269:95;1373:32;1392:12;1373:18;;;:32;;:::i;:::-;1225:187;187:848:4;;2912:187:0;2985:16;3004:6;;;;;;;;;;;2985:25;;3029:8;3020:6;;:17;;;;;;;;;;;;;;;;;;3083:8;3052:40;;3073:8;3052:40;;;;;;;;;;;;2975:124;2912:187;:::o;7:126:5:-;44:7;84:42;77:5;73:54;62:65;;7:126;;;:::o;139:96::-;176:7;205:24;223:5;205:24;:::i;:::-;194:35;;139:96;;;:::o;241:118::-;328:24;346:5;328:24;:::i;:::-;323:3;316:37;241:118;;:::o;365:222::-;458:4;496:2;485:9;481:18;473:26;;509:71;577:1;566:9;562:17;553:6;509:71;:::i;:::-;365:222;;;;:::o;187:848:4:-;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@_checkOwner_84":{"entryPoint":519,"id":84,"parameterSlots":0,"returnSlots":0},"@_efficientKeccak256_216":{"entryPoint":1004,"id":216,"parameterSlots":2,"returnSlots":1},"@_msgSender_159":{"entryPoint":873,"id":159,"parameterSlots":0,"returnSlots":1},"@_transferOwnership_146":{"entryPoint":654,"id":146,"parameterSlots":1,"returnSlots":0},"@commutativeKeccak256_204":{"entryPoint":961,"id":204,"parameterSlots":2,"returnSlots":1},"@merkleRoot_1298":{"entryPoint":277,"id":1298,"parameterSlots":0,"returnSlots":0},"@owner_67":{"entryPoint":344,"id":67,"parameterSlots":0,"returnSlots":1},"@processProof_287":{"entryPoint":881,"id":287,"parameterSlots":2,"returnSlots":1},"@renounceOwnership_98":{"entryPoint":283,"id":98,"parameterSlots":0,"returnSlots":0},"@setMerkleRoot_1318":{"entryPoint":303,"id":1318,"parameterSlots":1,"returnSlots":0},"@transferOwnership_126":{"entryPoint":385,"id":126,"parameterSlots":1,"returnSlots":0},"@verifyTransactionInclusion_1336":{"entryPoint":321,"id":1336,"parameterSlots":2,"returnSlots":1},"@verify_246":{"entryPoint":850,"id":246,"parameterSlots":3,"returnSlots":1},"abi_decode_available_length_t_array$_t_bytes32_$dyn_memory_ptr":{"entryPoint":1382,"id":null,"parameterSlots":3,"returnSlots":1},"abi_decode_t_address":{"entryPoint":1794,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_array$_t_bytes32_$dyn_memory_ptr":{"entryPoint":1487,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes32":{"entryPoint":1122,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":1815,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_array$_t_bytes32_$dyn_memory_ptrt_bytes32":{"entryPoint":1533,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes32":{"entryPoint":1143,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_address_to_t_address_fromStack":{"entryPoint":1729,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bool_to_t_bool_fromStack":{"entryPoint":1637,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bytes32_to_t_bytes32_fromStack":{"entryPoint":1037,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":1744,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":1652,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed":{"entryPoint":1052,"id":null,"parameterSlots":2,"returnSlots":1},"allocate_memory":{"entryPoint":1306,"id":null,"parameterSlots":1,"returnSlots":1},"allocate_unbounded":{"entryPoint":1079,"id":null,"parameterSlots":0,"returnSlots":1},"array_allocation_size_t_array$_t_bytes32_$dyn_memory_ptr":{"entryPoint":1333,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_address":{"entryPoint":1711,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bool":{"entryPoint":1625,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bytes32":{"entryPoint":1027,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":1679,"id":null,"parameterSlots":1,"returnSlots":1},"finalize_allocation":{"entryPoint":1257,"id":null,"parameterSlots":2,"returnSlots":0},"panic_error_0x32":{"entryPoint":1860,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":1210,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d":{"entryPoint":1188,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef":{"entryPoint":1377,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":1094,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":1089,"id":null,"parameterSlots":0,"returnSlots":0},"round_up_to_mul_of_32":{"entryPoint":1193,"id":null,"parameterSlots":1,"returnSlots":1},"validator_revert_t_address":{"entryPoint":1771,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bytes32":{"entryPoint":1099,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nativeSrc":"0:6276:5","nodeType":"YulBlock","src":"0:6276:5","statements":[{"body":{"nativeSrc":"52:32:5","nodeType":"YulBlock","src":"52:32:5","statements":[{"nativeSrc":"62:16:5","nodeType":"YulAssignment","src":"62:16:5","value":{"name":"value","nativeSrc":"73:5:5","nodeType":"YulIdentifier","src":"73:5:5"},"variableNames":[{"name":"cleaned","nativeSrc":"62:7:5","nodeType":"YulIdentifier","src":"62:7:5"}]}]},"name":"cleanup_t_bytes32","nativeSrc":"7:77:5","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"34:5:5","nodeType":"YulTypedName","src":"34:5:5","type":""}],"returnVariables":[{"name":"cleaned","nativeSrc":"44:7:5","nodeType":"YulTypedName","src":"44:7:5","type":""}],"src":"7:77:5"},{"body":{"nativeSrc":"155:53:5","nodeType":"YulBlock","src":"155:53:5","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"172:3:5","nodeType":"YulIdentifier","src":"172:3:5"},{"arguments":[{"name":"value","nativeSrc":"195:5:5","nodeType":"YulIdentifier","src":"195:5:5"}],"functionName":{"name":"cleanup_t_bytes32","nativeSrc":"177:17:5","nodeType":"YulIdentifier","src":"177:17:5"},"nativeSrc":"177:24:5","nodeType":"YulFunctionCall","src":"177:24:5"}],"functionName":{"name":"mstore","nativeSrc":"165:6:5","nodeType":"YulIdentifier","src":"165:6:5"},"nativeSrc":"165:37:5","nodeType":"YulFunctionCall","src":"165:37:5"},"nativeSrc":"165:37:5","nodeType":"YulExpressionStatement","src":"165:37:5"}]},"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nativeSrc":"90:118:5","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"143:5:5","nodeType":"YulTypedName","src":"143:5:5","type":""},{"name":"pos","nativeSrc":"150:3:5","nodeType":"YulTypedName","src":"150:3:5","type":""}],"src":"90:118:5"},{"body":{"nativeSrc":"312:124:5","nodeType":"YulBlock","src":"312:124:5","statements":[{"nativeSrc":"322:26:5","nodeType":"YulAssignment","src":"322:26:5","value":{"arguments":[{"name":"headStart","nativeSrc":"334:9:5","nodeType":"YulIdentifier","src":"334:9:5"},{"kind":"number","nativeSrc":"345:2:5","nodeType":"YulLiteral","src":"345:2:5","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"330:3:5","nodeType":"YulIdentifier","src":"330:3:5"},"nativeSrc":"330:18:5","nodeType":"YulFunctionCall","src":"330:18:5"},"variableNames":[{"name":"tail","nativeSrc":"322:4:5","nodeType":"YulIdentifier","src":"322:4:5"}]},{"expression":{"arguments":[{"name":"value0","nativeSrc":"402:6:5","nodeType":"YulIdentifier","src":"402:6:5"},{"arguments":[{"name":"headStart","nativeSrc":"415:9:5","nodeType":"YulIdentifier","src":"415:9:5"},{"kind":"number","nativeSrc":"426:1:5","nodeType":"YulLiteral","src":"426:1:5","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"411:3:5","nodeType":"YulIdentifier","src":"411:3:5"},"nativeSrc":"411:17:5","nodeType":"YulFunctionCall","src":"411:17:5"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nativeSrc":"358:43:5","nodeType":"YulIdentifier","src":"358:43:5"},"nativeSrc":"358:71:5","nodeType":"YulFunctionCall","src":"358:71:5"},"nativeSrc":"358:71:5","nodeType":"YulExpressionStatement","src":"358:71:5"}]},"name":"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed","nativeSrc":"214:222:5","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"284:9:5","nodeType":"YulTypedName","src":"284:9:5","type":""},{"name":"value0","nativeSrc":"296:6:5","nodeType":"YulTypedName","src":"296:6:5","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"307:4:5","nodeType":"YulTypedName","src":"307:4:5","type":""}],"src":"214:222:5"},{"body":{"nativeSrc":"482:35:5","nodeType":"YulBlock","src":"482:35:5","statements":[{"nativeSrc":"492:19:5","nodeType":"YulAssignment","src":"492:19:5","value":{"arguments":[{"kind":"number","nativeSrc":"508:2:5","nodeType":"YulLiteral","src":"508:2:5","type":"","value":"64"}],"functionName":{"name":"mload","nativeSrc":"502:5:5","nodeType":"YulIdentifier","src":"502:5:5"},"nativeSrc":"502:9:5","nodeType":"YulFunctionCall","src":"502:9:5"},"variableNames":[{"name":"memPtr","nativeSrc":"492:6:5","nodeType":"YulIdentifier","src":"492:6:5"}]}]},"name":"allocate_unbounded","nativeSrc":"442:75:5","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nativeSrc":"475:6:5","nodeType":"YulTypedName","src":"475:6:5","type":""}],"src":"442:75:5"},{"body":{"nativeSrc":"612:28:5","nodeType":"YulBlock","src":"612:28:5","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"629:1:5","nodeType":"YulLiteral","src":"629:1:5","type":"","value":"0"},{"kind":"number","nativeSrc":"632:1:5","nodeType":"YulLiteral","src":"632:1:5","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"622:6:5","nodeType":"YulIdentifier","src":"622:6:5"},"nativeSrc":"622:12:5","nodeType":"YulFunctionCall","src":"622:12:5"},"nativeSrc":"622:12:5","nodeType":"YulExpressionStatement","src":"622:12:5"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nativeSrc":"523:117:5","nodeType":"YulFunctionDefinition","src":"523:117:5"},{"body":{"nativeSrc":"735:28:5","nodeType":"YulBlock","src":"735:28:5","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"752:1:5","nodeType":"YulLiteral","src":"752:1:5","type":"","value":"0"},{"kind":"number","nativeSrc":"755:1:5","nodeType":"YulLiteral","src":"755:1:5","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"745:6:5","nodeType":"YulIdentifier","src":"745:6:5"},"nativeSrc":"745:12:5","nodeType":"YulFunctionCall","src":"745:12:5"},"nativeSrc":"745:12:5","nodeType":"YulExpressionStatement","src":"745:12:5"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nativeSrc":"646:117:5","nodeType":"YulFunctionDefinition","src":"646:117:5"},{"body":{"nativeSrc":"812:79:5","nodeType":"YulBlock","src":"812:79:5","statements":[{"body":{"nativeSrc":"869:16:5","nodeType":"YulBlock","src":"869:16:5","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"878:1:5","nodeType":"YulLiteral","src":"878:1:5","type":"","value":"0"},{"kind":"number","nativeSrc":"881:1:5","nodeType":"YulLiteral","src":"881:1:5","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"871:6:5","nodeType":"YulIdentifier","src":"871:6:5"},"nativeSrc":"871:12:5","nodeType":"YulFunctionCall","src":"871:12:5"},"nativeSrc":"871:12:5","nodeType":"YulExpressionStatement","src":"871:12:5"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"835:5:5","nodeType":"YulIdentifier","src":"835:5:5"},{"arguments":[{"name":"value","nativeSrc":"860:5:5","nodeType":"YulIdentifier","src":"860:5:5"}],"functionName":{"name":"cleanup_t_bytes32","nativeSrc":"842:17:5","nodeType":"YulIdentifier","src":"842:17:5"},"nativeSrc":"842:24:5","nodeType":"YulFunctionCall","src":"842:24:5"}],"functionName":{"name":"eq","nativeSrc":"832:2:5","nodeType":"YulIdentifier","src":"832:2:5"},"nativeSrc":"832:35:5","nodeType":"YulFunctionCall","src":"832:35:5"}],"functionName":{"name":"iszero","nativeSrc":"825:6:5","nodeType":"YulIdentifier","src":"825:6:5"},"nativeSrc":"825:43:5","nodeType":"YulFunctionCall","src":"825:43:5"},"nativeSrc":"822:63:5","nodeType":"YulIf","src":"822:63:5"}]},"name":"validator_revert_t_bytes32","nativeSrc":"769:122:5","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"805:5:5","nodeType":"YulTypedName","src":"805:5:5","type":""}],"src":"769:122:5"},{"body":{"nativeSrc":"949:87:5","nodeType":"YulBlock","src":"949:87:5","statements":[{"nativeSrc":"959:29:5","nodeType":"YulAssignment","src":"959:29:5","value":{"arguments":[{"name":"offset","nativeSrc":"981:6:5","nodeType":"YulIdentifier","src":"981:6:5"}],"functionName":{"name":"calldataload","nativeSrc":"968:12:5","nodeType":"YulIdentifier","src":"968:12:5"},"nativeSrc":"968:20:5","nodeType":"YulFunctionCall","src":"968:20:5"},"variableNames":[{"name":"value","nativeSrc":"959:5:5","nodeType":"YulIdentifier","src":"959:5:5"}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"1024:5:5","nodeType":"YulIdentifier","src":"1024:5:5"}],"functionName":{"name":"validator_revert_t_bytes32","nativeSrc":"997:26:5","nodeType":"YulIdentifier","src":"997:26:5"},"nativeSrc":"997:33:5","nodeType":"YulFunctionCall","src":"997:33:5"},"nativeSrc":"997:33:5","nodeType":"YulExpressionStatement","src":"997:33:5"}]},"name":"abi_decode_t_bytes32","nativeSrc":"897:139:5","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"927:6:5","nodeType":"YulTypedName","src":"927:6:5","type":""},{"name":"end","nativeSrc":"935:3:5","nodeType":"YulTypedName","src":"935:3:5","type":""}],"returnVariables":[{"name":"value","nativeSrc":"943:5:5","nodeType":"YulTypedName","src":"943:5:5","type":""}],"src":"897:139:5"},{"body":{"nativeSrc":"1108:263:5","nodeType":"YulBlock","src":"1108:263:5","statements":[{"body":{"nativeSrc":"1154:83:5","nodeType":"YulBlock","src":"1154:83:5","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nativeSrc":"1156:77:5","nodeType":"YulIdentifier","src":"1156:77:5"},"nativeSrc":"1156:79:5","nodeType":"YulFunctionCall","src":"1156:79:5"},"nativeSrc":"1156:79:5","nodeType":"YulExpressionStatement","src":"1156:79:5"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"1129:7:5","nodeType":"YulIdentifier","src":"1129:7:5"},{"name":"headStart","nativeSrc":"1138:9:5","nodeType":"YulIdentifier","src":"1138:9:5"}],"functionName":{"name":"sub","nativeSrc":"1125:3:5","nodeType":"YulIdentifier","src":"1125:3:5"},"nativeSrc":"1125:23:5","nodeType":"YulFunctionCall","src":"1125:23:5"},{"kind":"number","nativeSrc":"1150:2:5","nodeType":"YulLiteral","src":"1150:2:5","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"1121:3:5","nodeType":"YulIdentifier","src":"1121:3:5"},"nativeSrc":"1121:32:5","nodeType":"YulFunctionCall","src":"1121:32:5"},"nativeSrc":"1118:119:5","nodeType":"YulIf","src":"1118:119:5"},{"nativeSrc":"1247:117:5","nodeType":"YulBlock","src":"1247:117:5","statements":[{"nativeSrc":"1262:15:5","nodeType":"YulVariableDeclaration","src":"1262:15:5","value":{"kind":"number","nativeSrc":"1276:1:5","nodeType":"YulLiteral","src":"1276:1:5","type":"","value":"0"},"variables":[{"name":"offset","nativeSrc":"1266:6:5","nodeType":"YulTypedName","src":"1266:6:5","type":""}]},{"nativeSrc":"1291:63:5","nodeType":"YulAssignment","src":"1291:63:5","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1326:9:5","nodeType":"YulIdentifier","src":"1326:9:5"},{"name":"offset","nativeSrc":"1337:6:5","nodeType":"YulIdentifier","src":"1337:6:5"}],"functionName":{"name":"add","nativeSrc":"1322:3:5","nodeType":"YulIdentifier","src":"1322:3:5"},"nativeSrc":"1322:22:5","nodeType":"YulFunctionCall","src":"1322:22:5"},{"name":"dataEnd","nativeSrc":"1346:7:5","nodeType":"YulIdentifier","src":"1346:7:5"}],"functionName":{"name":"abi_decode_t_bytes32","nativeSrc":"1301:20:5","nodeType":"YulIdentifier","src":"1301:20:5"},"nativeSrc":"1301:53:5","nodeType":"YulFunctionCall","src":"1301:53:5"},"variableNames":[{"name":"value0","nativeSrc":"1291:6:5","nodeType":"YulIdentifier","src":"1291:6:5"}]}]}]},"name":"abi_decode_tuple_t_bytes32","nativeSrc":"1042:329:5","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1078:9:5","nodeType":"YulTypedName","src":"1078:9:5","type":""},{"name":"dataEnd","nativeSrc":"1089:7:5","nodeType":"YulTypedName","src":"1089:7:5","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"1101:6:5","nodeType":"YulTypedName","src":"1101:6:5","type":""}],"src":"1042:329:5"},{"body":{"nativeSrc":"1466:28:5","nodeType":"YulBlock","src":"1466:28:5","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1483:1:5","nodeType":"YulLiteral","src":"1483:1:5","type":"","value":"0"},{"kind":"number","nativeSrc":"1486:1:5","nodeType":"YulLiteral","src":"1486:1:5","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1476:6:5","nodeType":"YulIdentifier","src":"1476:6:5"},"nativeSrc":"1476:12:5","nodeType":"YulFunctionCall","src":"1476:12:5"},"nativeSrc":"1476:12:5","nodeType":"YulExpressionStatement","src":"1476:12:5"}]},"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nativeSrc":"1377:117:5","nodeType":"YulFunctionDefinition","src":"1377:117:5"},{"body":{"nativeSrc":"1548:54:5","nodeType":"YulBlock","src":"1548:54:5","statements":[{"nativeSrc":"1558:38:5","nodeType":"YulAssignment","src":"1558:38:5","value":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"1576:5:5","nodeType":"YulIdentifier","src":"1576:5:5"},{"kind":"number","nativeSrc":"1583:2:5","nodeType":"YulLiteral","src":"1583:2:5","type":"","value":"31"}],"functionName":{"name":"add","nativeSrc":"1572:3:5","nodeType":"YulIdentifier","src":"1572:3:5"},"nativeSrc":"1572:14:5","nodeType":"YulFunctionCall","src":"1572:14:5"},{"arguments":[{"kind":"number","nativeSrc":"1592:2:5","nodeType":"YulLiteral","src":"1592:2:5","type":"","value":"31"}],"functionName":{"name":"not","nativeSrc":"1588:3:5","nodeType":"YulIdentifier","src":"1588:3:5"},"nativeSrc":"1588:7:5","nodeType":"YulFunctionCall","src":"1588:7:5"}],"functionName":{"name":"and","nativeSrc":"1568:3:5","nodeType":"YulIdentifier","src":"1568:3:5"},"nativeSrc":"1568:28:5","nodeType":"YulFunctionCall","src":"1568:28:5"},"variableNames":[{"name":"result","nativeSrc":"1558:6:5","nodeType":"YulIdentifier","src":"1558:6:5"}]}]},"name":"round_up_to_mul_of_32","nativeSrc":"1500:102:5","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"1531:5:5","nodeType":"YulTypedName","src":"1531:5:5","type":""}],"returnVariables":[{"name":"result","nativeSrc":"1541:6:5","nodeType":"YulTypedName","src":"1541:6:5","type":""}],"src":"1500:102:5"},{"body":{"nativeSrc":"1636:152:5","nodeType":"YulBlock","src":"1636:152:5","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1653:1:5","nodeType":"YulLiteral","src":"1653:1:5","type":"","value":"0"},{"kind":"number","nativeSrc":"1656:77:5","nodeType":"YulLiteral","src":"1656:77:5","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"1646:6:5","nodeType":"YulIdentifier","src":"1646:6:5"},"nativeSrc":"1646:88:5","nodeType":"YulFunctionCall","src":"1646:88:5"},"nativeSrc":"1646:88:5","nodeType":"YulExpressionStatement","src":"1646:88:5"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"1750:1:5","nodeType":"YulLiteral","src":"1750:1:5","type":"","value":"4"},{"kind":"number","nativeSrc":"1753:4:5","nodeType":"YulLiteral","src":"1753:4:5","type":"","value":"0x41"}],"functionName":{"name":"mstore","nativeSrc":"1743:6:5","nodeType":"YulIdentifier","src":"1743:6:5"},"nativeSrc":"1743:15:5","nodeType":"YulFunctionCall","src":"1743:15:5"},"nativeSrc":"1743:15:5","nodeType":"YulExpressionStatement","src":"1743:15:5"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"1774:1:5","nodeType":"YulLiteral","src":"1774:1:5","type":"","value":"0"},{"kind":"number","nativeSrc":"1777:4:5","nodeType":"YulLiteral","src":"1777:4:5","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"1767:6:5","nodeType":"YulIdentifier","src":"1767:6:5"},"nativeSrc":"1767:15:5","nodeType":"YulFunctionCall","src":"1767:15:5"},"nativeSrc":"1767:15:5","nodeType":"YulExpressionStatement","src":"1767:15:5"}]},"name":"panic_error_0x41","nativeSrc":"1608:180:5","nodeType":"YulFunctionDefinition","src":"1608:180:5"},{"body":{"nativeSrc":"1837:238:5","nodeType":"YulBlock","src":"1837:238:5","statements":[{"nativeSrc":"1847:58:5","nodeType":"YulVariableDeclaration","src":"1847:58:5","value":{"arguments":[{"name":"memPtr","nativeSrc":"1869:6:5","nodeType":"YulIdentifier","src":"1869:6:5"},{"arguments":[{"name":"size","nativeSrc":"1899:4:5","nodeType":"YulIdentifier","src":"1899:4:5"}],"functionName":{"name":"round_up_to_mul_of_32","nativeSrc":"1877:21:5","nodeType":"YulIdentifier","src":"1877:21:5"},"nativeSrc":"1877:27:5","nodeType":"YulFunctionCall","src":"1877:27:5"}],"functionName":{"name":"add","nativeSrc":"1865:3:5","nodeType":"YulIdentifier","src":"1865:3:5"},"nativeSrc":"1865:40:5","nodeType":"YulFunctionCall","src":"1865:40:5"},"variables":[{"name":"newFreePtr","nativeSrc":"1851:10:5","nodeType":"YulTypedName","src":"1851:10:5","type":""}]},{"body":{"nativeSrc":"2016:22:5","nodeType":"YulBlock","src":"2016:22:5","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nativeSrc":"2018:16:5","nodeType":"YulIdentifier","src":"2018:16:5"},"nativeSrc":"2018:18:5","nodeType":"YulFunctionCall","src":"2018:18:5"},"nativeSrc":"2018:18:5","nodeType":"YulExpressionStatement","src":"2018:18:5"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nativeSrc":"1959:10:5","nodeType":"YulIdentifier","src":"1959:10:5"},{"kind":"number","nativeSrc":"1971:18:5","nodeType":"YulLiteral","src":"1971:18:5","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"1956:2:5","nodeType":"YulIdentifier","src":"1956:2:5"},"nativeSrc":"1956:34:5","nodeType":"YulFunctionCall","src":"1956:34:5"},{"arguments":[{"name":"newFreePtr","nativeSrc":"1995:10:5","nodeType":"YulIdentifier","src":"1995:10:5"},{"name":"memPtr","nativeSrc":"2007:6:5","nodeType":"YulIdentifier","src":"2007:6:5"}],"functionName":{"name":"lt","nativeSrc":"1992:2:5","nodeType":"YulIdentifier","src":"1992:2:5"},"nativeSrc":"1992:22:5","nodeType":"YulFunctionCall","src":"1992:22:5"}],"functionName":{"name":"or","nativeSrc":"1953:2:5","nodeType":"YulIdentifier","src":"1953:2:5"},"nativeSrc":"1953:62:5","nodeType":"YulFunctionCall","src":"1953:62:5"},"nativeSrc":"1950:88:5","nodeType":"YulIf","src":"1950:88:5"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"2054:2:5","nodeType":"YulLiteral","src":"2054:2:5","type":"","value":"64"},{"name":"newFreePtr","nativeSrc":"2058:10:5","nodeType":"YulIdentifier","src":"2058:10:5"}],"functionName":{"name":"mstore","nativeSrc":"2047:6:5","nodeType":"YulIdentifier","src":"2047:6:5"},"nativeSrc":"2047:22:5","nodeType":"YulFunctionCall","src":"2047:22:5"},"nativeSrc":"2047:22:5","nodeType":"YulExpressionStatement","src":"2047:22:5"}]},"name":"finalize_allocation","nativeSrc":"1794:281:5","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nativeSrc":"1823:6:5","nodeType":"YulTypedName","src":"1823:6:5","type":""},{"name":"size","nativeSrc":"1831:4:5","nodeType":"YulTypedName","src":"1831:4:5","type":""}],"src":"1794:281:5"},{"body":{"nativeSrc":"2122:88:5","nodeType":"YulBlock","src":"2122:88:5","statements":[{"nativeSrc":"2132:30:5","nodeType":"YulAssignment","src":"2132:30:5","value":{"arguments":[],"functionName":{"name":"allocate_unbounded","nativeSrc":"2142:18:5","nodeType":"YulIdentifier","src":"2142:18:5"},"nativeSrc":"2142:20:5","nodeType":"YulFunctionCall","src":"2142:20:5"},"variableNames":[{"name":"memPtr","nativeSrc":"2132:6:5","nodeType":"YulIdentifier","src":"2132:6:5"}]},{"expression":{"arguments":[{"name":"memPtr","nativeSrc":"2191:6:5","nodeType":"YulIdentifier","src":"2191:6:5"},{"name":"size","nativeSrc":"2199:4:5","nodeType":"YulIdentifier","src":"2199:4:5"}],"functionName":{"name":"finalize_allocation","nativeSrc":"2171:19:5","nodeType":"YulIdentifier","src":"2171:19:5"},"nativeSrc":"2171:33:5","nodeType":"YulFunctionCall","src":"2171:33:5"},"nativeSrc":"2171:33:5","nodeType":"YulExpressionStatement","src":"2171:33:5"}]},"name":"allocate_memory","nativeSrc":"2081:129:5","nodeType":"YulFunctionDefinition","parameters":[{"name":"size","nativeSrc":"2106:4:5","nodeType":"YulTypedName","src":"2106:4:5","type":""}],"returnVariables":[{"name":"memPtr","nativeSrc":"2115:6:5","nodeType":"YulTypedName","src":"2115:6:5","type":""}],"src":"2081:129:5"},{"body":{"nativeSrc":"2298:229:5","nodeType":"YulBlock","src":"2298:229:5","statements":[{"body":{"nativeSrc":"2403:22:5","nodeType":"YulBlock","src":"2403:22:5","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nativeSrc":"2405:16:5","nodeType":"YulIdentifier","src":"2405:16:5"},"nativeSrc":"2405:18:5","nodeType":"YulFunctionCall","src":"2405:18:5"},"nativeSrc":"2405:18:5","nodeType":"YulExpressionStatement","src":"2405:18:5"}]},"condition":{"arguments":[{"name":"length","nativeSrc":"2375:6:5","nodeType":"YulIdentifier","src":"2375:6:5"},{"kind":"number","nativeSrc":"2383:18:5","nodeType":"YulLiteral","src":"2383:18:5","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"2372:2:5","nodeType":"YulIdentifier","src":"2372:2:5"},"nativeSrc":"2372:30:5","nodeType":"YulFunctionCall","src":"2372:30:5"},"nativeSrc":"2369:56:5","nodeType":"YulIf","src":"2369:56:5"},{"nativeSrc":"2435:25:5","nodeType":"YulAssignment","src":"2435:25:5","value":{"arguments":[{"name":"length","nativeSrc":"2447:6:5","nodeType":"YulIdentifier","src":"2447:6:5"},{"kind":"number","nativeSrc":"2455:4:5","nodeType":"YulLiteral","src":"2455:4:5","type":"","value":"0x20"}],"functionName":{"name":"mul","nativeSrc":"2443:3:5","nodeType":"YulIdentifier","src":"2443:3:5"},"nativeSrc":"2443:17:5","nodeType":"YulFunctionCall","src":"2443:17:5"},"variableNames":[{"name":"size","nativeSrc":"2435:4:5","nodeType":"YulIdentifier","src":"2435:4:5"}]},{"nativeSrc":"2497:23:5","nodeType":"YulAssignment","src":"2497:23:5","value":{"arguments":[{"name":"size","nativeSrc":"2509:4:5","nodeType":"YulIdentifier","src":"2509:4:5"},{"kind":"number","nativeSrc":"2515:4:5","nodeType":"YulLiteral","src":"2515:4:5","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"2505:3:5","nodeType":"YulIdentifier","src":"2505:3:5"},"nativeSrc":"2505:15:5","nodeType":"YulFunctionCall","src":"2505:15:5"},"variableNames":[{"name":"size","nativeSrc":"2497:4:5","nodeType":"YulIdentifier","src":"2497:4:5"}]}]},"name":"array_allocation_size_t_array$_t_bytes32_$dyn_memory_ptr","nativeSrc":"2216:311:5","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nativeSrc":"2282:6:5","nodeType":"YulTypedName","src":"2282:6:5","type":""}],"returnVariables":[{"name":"size","nativeSrc":"2293:4:5","nodeType":"YulTypedName","src":"2293:4:5","type":""}],"src":"2216:311:5"},{"body":{"nativeSrc":"2622:28:5","nodeType":"YulBlock","src":"2622:28:5","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2639:1:5","nodeType":"YulLiteral","src":"2639:1:5","type":"","value":"0"},{"kind":"number","nativeSrc":"2642:1:5","nodeType":"YulLiteral","src":"2642:1:5","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2632:6:5","nodeType":"YulIdentifier","src":"2632:6:5"},"nativeSrc":"2632:12:5","nodeType":"YulFunctionCall","src":"2632:12:5"},"nativeSrc":"2632:12:5","nodeType":"YulExpressionStatement","src":"2632:12:5"}]},"name":"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef","nativeSrc":"2533:117:5","nodeType":"YulFunctionDefinition","src":"2533:117:5"},{"body":{"nativeSrc":"2775:608:5","nodeType":"YulBlock","src":"2775:608:5","statements":[{"nativeSrc":"2785:90:5","nodeType":"YulAssignment","src":"2785:90:5","value":{"arguments":[{"arguments":[{"name":"length","nativeSrc":"2867:6:5","nodeType":"YulIdentifier","src":"2867:6:5"}],"functionName":{"name":"array_allocation_size_t_array$_t_bytes32_$dyn_memory_ptr","nativeSrc":"2810:56:5","nodeType":"YulIdentifier","src":"2810:56:5"},"nativeSrc":"2810:64:5","nodeType":"YulFunctionCall","src":"2810:64:5"}],"functionName":{"name":"allocate_memory","nativeSrc":"2794:15:5","nodeType":"YulIdentifier","src":"2794:15:5"},"nativeSrc":"2794:81:5","nodeType":"YulFunctionCall","src":"2794:81:5"},"variableNames":[{"name":"array","nativeSrc":"2785:5:5","nodeType":"YulIdentifier","src":"2785:5:5"}]},{"nativeSrc":"2884:16:5","nodeType":"YulVariableDeclaration","src":"2884:16:5","value":{"name":"array","nativeSrc":"2895:5:5","nodeType":"YulIdentifier","src":"2895:5:5"},"variables":[{"name":"dst","nativeSrc":"2888:3:5","nodeType":"YulTypedName","src":"2888:3:5","type":""}]},{"expression":{"arguments":[{"name":"array","nativeSrc":"2917:5:5","nodeType":"YulIdentifier","src":"2917:5:5"},{"name":"length","nativeSrc":"2924:6:5","nodeType":"YulIdentifier","src":"2924:6:5"}],"functionName":{"name":"mstore","nativeSrc":"2910:6:5","nodeType":"YulIdentifier","src":"2910:6:5"},"nativeSrc":"2910:21:5","nodeType":"YulFunctionCall","src":"2910:21:5"},"nativeSrc":"2910:21:5","nodeType":"YulExpressionStatement","src":"2910:21:5"},{"nativeSrc":"2940:23:5","nodeType":"YulAssignment","src":"2940:23:5","value":{"arguments":[{"name":"array","nativeSrc":"2951:5:5","nodeType":"YulIdentifier","src":"2951:5:5"},{"kind":"number","nativeSrc":"2958:4:5","nodeType":"YulLiteral","src":"2958:4:5","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"2947:3:5","nodeType":"YulIdentifier","src":"2947:3:5"},"nativeSrc":"2947:16:5","nodeType":"YulFunctionCall","src":"2947:16:5"},"variableNames":[{"name":"dst","nativeSrc":"2940:3:5","nodeType":"YulIdentifier","src":"2940:3:5"}]},{"nativeSrc":"2973:44:5","nodeType":"YulVariableDeclaration","src":"2973:44:5","value":{"arguments":[{"name":"offset","nativeSrc":"2991:6:5","nodeType":"YulIdentifier","src":"2991:6:5"},{"arguments":[{"name":"length","nativeSrc":"3003:6:5","nodeType":"YulIdentifier","src":"3003:6:5"},{"kind":"number","nativeSrc":"3011:4:5","nodeType":"YulLiteral","src":"3011:4:5","type":"","value":"0x20"}],"functionName":{"name":"mul","nativeSrc":"2999:3:5","nodeType":"YulIdentifier","src":"2999:3:5"},"nativeSrc":"2999:17:5","nodeType":"YulFunctionCall","src":"2999:17:5"}],"functionName":{"name":"add","nativeSrc":"2987:3:5","nodeType":"YulIdentifier","src":"2987:3:5"},"nativeSrc":"2987:30:5","nodeType":"YulFunctionCall","src":"2987:30:5"},"variables":[{"name":"srcEnd","nativeSrc":"2977:6:5","nodeType":"YulTypedName","src":"2977:6:5","type":""}]},{"body":{"nativeSrc":"3045:103:5","nodeType":"YulBlock","src":"3045:103:5","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef","nativeSrc":"3059:77:5","nodeType":"YulIdentifier","src":"3059:77:5"},"nativeSrc":"3059:79:5","nodeType":"YulFunctionCall","src":"3059:79:5"},"nativeSrc":"3059:79:5","nodeType":"YulExpressionStatement","src":"3059:79:5"}]},"condition":{"arguments":[{"name":"srcEnd","nativeSrc":"3032:6:5","nodeType":"YulIdentifier","src":"3032:6:5"},{"name":"end","nativeSrc":"3040:3:5","nodeType":"YulIdentifier","src":"3040:3:5"}],"functionName":{"name":"gt","nativeSrc":"3029:2:5","nodeType":"YulIdentifier","src":"3029:2:5"},"nativeSrc":"3029:15:5","nodeType":"YulFunctionCall","src":"3029:15:5"},"nativeSrc":"3026:122:5","nodeType":"YulIf","src":"3026:122:5"},{"body":{"nativeSrc":"3233:144:5","nodeType":"YulBlock","src":"3233:144:5","statements":[{"nativeSrc":"3248:21:5","nodeType":"YulVariableDeclaration","src":"3248:21:5","value":{"name":"src","nativeSrc":"3266:3:5","nodeType":"YulIdentifier","src":"3266:3:5"},"variables":[{"name":"elementPos","nativeSrc":"3252:10:5","nodeType":"YulTypedName","src":"3252:10:5","type":""}]},{"expression":{"arguments":[{"name":"dst","nativeSrc":"3290:3:5","nodeType":"YulIdentifier","src":"3290:3:5"},{"arguments":[{"name":"elementPos","nativeSrc":"3316:10:5","nodeType":"YulIdentifier","src":"3316:10:5"},{"name":"end","nativeSrc":"3328:3:5","nodeType":"YulIdentifier","src":"3328:3:5"}],"functionName":{"name":"abi_decode_t_bytes32","nativeSrc":"3295:20:5","nodeType":"YulIdentifier","src":"3295:20:5"},"nativeSrc":"3295:37:5","nodeType":"YulFunctionCall","src":"3295:37:5"}],"functionName":{"name":"mstore","nativeSrc":"3283:6:5","nodeType":"YulIdentifier","src":"3283:6:5"},"nativeSrc":"3283:50:5","nodeType":"YulFunctionCall","src":"3283:50:5"},"nativeSrc":"3283:50:5","nodeType":"YulExpressionStatement","src":"3283:50:5"},{"nativeSrc":"3346:21:5","nodeType":"YulAssignment","src":"3346:21:5","value":{"arguments":[{"name":"dst","nativeSrc":"3357:3:5","nodeType":"YulIdentifier","src":"3357:3:5"},{"kind":"number","nativeSrc":"3362:4:5","nodeType":"YulLiteral","src":"3362:4:5","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"3353:3:5","nodeType":"YulIdentifier","src":"3353:3:5"},"nativeSrc":"3353:14:5","nodeType":"YulFunctionCall","src":"3353:14:5"},"variableNames":[{"name":"dst","nativeSrc":"3346:3:5","nodeType":"YulIdentifier","src":"3346:3:5"}]}]},"condition":{"arguments":[{"name":"src","nativeSrc":"3186:3:5","nodeType":"YulIdentifier","src":"3186:3:5"},{"name":"srcEnd","nativeSrc":"3191:6:5","nodeType":"YulIdentifier","src":"3191:6:5"}],"functionName":{"name":"lt","nativeSrc":"3183:2:5","nodeType":"YulIdentifier","src":"3183:2:5"},"nativeSrc":"3183:15:5","nodeType":"YulFunctionCall","src":"3183:15:5"},"nativeSrc":"3157:220:5","nodeType":"YulForLoop","post":{"nativeSrc":"3199:25:5","nodeType":"YulBlock","src":"3199:25:5","statements":[{"nativeSrc":"3201:21:5","nodeType":"YulAssignment","src":"3201:21:5","value":{"arguments":[{"name":"src","nativeSrc":"3212:3:5","nodeType":"YulIdentifier","src":"3212:3:5"},{"kind":"number","nativeSrc":"3217:4:5","nodeType":"YulLiteral","src":"3217:4:5","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"3208:3:5","nodeType":"YulIdentifier","src":"3208:3:5"},"nativeSrc":"3208:14:5","nodeType":"YulFunctionCall","src":"3208:14:5"},"variableNames":[{"name":"src","nativeSrc":"3201:3:5","nodeType":"YulIdentifier","src":"3201:3:5"}]}]},"pre":{"nativeSrc":"3161:21:5","nodeType":"YulBlock","src":"3161:21:5","statements":[{"nativeSrc":"3163:17:5","nodeType":"YulVariableDeclaration","src":"3163:17:5","value":{"name":"offset","nativeSrc":"3174:6:5","nodeType":"YulIdentifier","src":"3174:6:5"},"variables":[{"name":"src","nativeSrc":"3167:3:5","nodeType":"YulTypedName","src":"3167:3:5","type":""}]}]},"src":"3157:220:5"}]},"name":"abi_decode_available_length_t_array$_t_bytes32_$dyn_memory_ptr","nativeSrc":"2673:710:5","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"2745:6:5","nodeType":"YulTypedName","src":"2745:6:5","type":""},{"name":"length","nativeSrc":"2753:6:5","nodeType":"YulTypedName","src":"2753:6:5","type":""},{"name":"end","nativeSrc":"2761:3:5","nodeType":"YulTypedName","src":"2761:3:5","type":""}],"returnVariables":[{"name":"array","nativeSrc":"2769:5:5","nodeType":"YulTypedName","src":"2769:5:5","type":""}],"src":"2673:710:5"},{"body":{"nativeSrc":"3483:293:5","nodeType":"YulBlock","src":"3483:293:5","statements":[{"body":{"nativeSrc":"3532:83:5","nodeType":"YulBlock","src":"3532:83:5","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nativeSrc":"3534:77:5","nodeType":"YulIdentifier","src":"3534:77:5"},"nativeSrc":"3534:79:5","nodeType":"YulFunctionCall","src":"3534:79:5"},"nativeSrc":"3534:79:5","nodeType":"YulExpressionStatement","src":"3534:79:5"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"3511:6:5","nodeType":"YulIdentifier","src":"3511:6:5"},{"kind":"number","nativeSrc":"3519:4:5","nodeType":"YulLiteral","src":"3519:4:5","type":"","value":"0x1f"}],"functionName":{"name":"add","nativeSrc":"3507:3:5","nodeType":"YulIdentifier","src":"3507:3:5"},"nativeSrc":"3507:17:5","nodeType":"YulFunctionCall","src":"3507:17:5"},{"name":"end","nativeSrc":"3526:3:5","nodeType":"YulIdentifier","src":"3526:3:5"}],"functionName":{"name":"slt","nativeSrc":"3503:3:5","nodeType":"YulIdentifier","src":"3503:3:5"},"nativeSrc":"3503:27:5","nodeType":"YulFunctionCall","src":"3503:27:5"}],"functionName":{"name":"iszero","nativeSrc":"3496:6:5","nodeType":"YulIdentifier","src":"3496:6:5"},"nativeSrc":"3496:35:5","nodeType":"YulFunctionCall","src":"3496:35:5"},"nativeSrc":"3493:122:5","nodeType":"YulIf","src":"3493:122:5"},{"nativeSrc":"3624:34:5","nodeType":"YulVariableDeclaration","src":"3624:34:5","value":{"arguments":[{"name":"offset","nativeSrc":"3651:6:5","nodeType":"YulIdentifier","src":"3651:6:5"}],"functionName":{"name":"calldataload","nativeSrc":"3638:12:5","nodeType":"YulIdentifier","src":"3638:12:5"},"nativeSrc":"3638:20:5","nodeType":"YulFunctionCall","src":"3638:20:5"},"variables":[{"name":"length","nativeSrc":"3628:6:5","nodeType":"YulTypedName","src":"3628:6:5","type":""}]},{"nativeSrc":"3667:103:5","nodeType":"YulAssignment","src":"3667:103:5","value":{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"3743:6:5","nodeType":"YulIdentifier","src":"3743:6:5"},{"kind":"number","nativeSrc":"3751:4:5","nodeType":"YulLiteral","src":"3751:4:5","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"3739:3:5","nodeType":"YulIdentifier","src":"3739:3:5"},"nativeSrc":"3739:17:5","nodeType":"YulFunctionCall","src":"3739:17:5"},{"name":"length","nativeSrc":"3758:6:5","nodeType":"YulIdentifier","src":"3758:6:5"},{"name":"end","nativeSrc":"3766:3:5","nodeType":"YulIdentifier","src":"3766:3:5"}],"functionName":{"name":"abi_decode_available_length_t_array$_t_bytes32_$dyn_memory_ptr","nativeSrc":"3676:62:5","nodeType":"YulIdentifier","src":"3676:62:5"},"nativeSrc":"3676:94:5","nodeType":"YulFunctionCall","src":"3676:94:5"},"variableNames":[{"name":"array","nativeSrc":"3667:5:5","nodeType":"YulIdentifier","src":"3667:5:5"}]}]},"name":"abi_decode_t_array$_t_bytes32_$dyn_memory_ptr","nativeSrc":"3406:370:5","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"3461:6:5","nodeType":"YulTypedName","src":"3461:6:5","type":""},{"name":"end","nativeSrc":"3469:3:5","nodeType":"YulTypedName","src":"3469:3:5","type":""}],"returnVariables":[{"name":"array","nativeSrc":"3477:5:5","nodeType":"YulTypedName","src":"3477:5:5","type":""}],"src":"3406:370:5"},{"body":{"nativeSrc":"3890:576:5","nodeType":"YulBlock","src":"3890:576:5","statements":[{"body":{"nativeSrc":"3936:83:5","nodeType":"YulBlock","src":"3936:83:5","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nativeSrc":"3938:77:5","nodeType":"YulIdentifier","src":"3938:77:5"},"nativeSrc":"3938:79:5","nodeType":"YulFunctionCall","src":"3938:79:5"},"nativeSrc":"3938:79:5","nodeType":"YulExpressionStatement","src":"3938:79:5"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"3911:7:5","nodeType":"YulIdentifier","src":"3911:7:5"},{"name":"headStart","nativeSrc":"3920:9:5","nodeType":"YulIdentifier","src":"3920:9:5"}],"functionName":{"name":"sub","nativeSrc":"3907:3:5","nodeType":"YulIdentifier","src":"3907:3:5"},"nativeSrc":"3907:23:5","nodeType":"YulFunctionCall","src":"3907:23:5"},{"kind":"number","nativeSrc":"3932:2:5","nodeType":"YulLiteral","src":"3932:2:5","type":"","value":"64"}],"functionName":{"name":"slt","nativeSrc":"3903:3:5","nodeType":"YulIdentifier","src":"3903:3:5"},"nativeSrc":"3903:32:5","nodeType":"YulFunctionCall","src":"3903:32:5"},"nativeSrc":"3900:119:5","nodeType":"YulIf","src":"3900:119:5"},{"nativeSrc":"4029:302:5","nodeType":"YulBlock","src":"4029:302:5","statements":[{"nativeSrc":"4044:45:5","nodeType":"YulVariableDeclaration","src":"4044:45:5","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4075:9:5","nodeType":"YulIdentifier","src":"4075:9:5"},{"kind":"number","nativeSrc":"4086:1:5","nodeType":"YulLiteral","src":"4086:1:5","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"4071:3:5","nodeType":"YulIdentifier","src":"4071:3:5"},"nativeSrc":"4071:17:5","nodeType":"YulFunctionCall","src":"4071:17:5"}],"functionName":{"name":"calldataload","nativeSrc":"4058:12:5","nodeType":"YulIdentifier","src":"4058:12:5"},"nativeSrc":"4058:31:5","nodeType":"YulFunctionCall","src":"4058:31:5"},"variables":[{"name":"offset","nativeSrc":"4048:6:5","nodeType":"YulTypedName","src":"4048:6:5","type":""}]},{"body":{"nativeSrc":"4136:83:5","nodeType":"YulBlock","src":"4136:83:5","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nativeSrc":"4138:77:5","nodeType":"YulIdentifier","src":"4138:77:5"},"nativeSrc":"4138:79:5","nodeType":"YulFunctionCall","src":"4138:79:5"},"nativeSrc":"4138:79:5","nodeType":"YulExpressionStatement","src":"4138:79:5"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"4108:6:5","nodeType":"YulIdentifier","src":"4108:6:5"},{"kind":"number","nativeSrc":"4116:18:5","nodeType":"YulLiteral","src":"4116:18:5","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"4105:2:5","nodeType":"YulIdentifier","src":"4105:2:5"},"nativeSrc":"4105:30:5","nodeType":"YulFunctionCall","src":"4105:30:5"},"nativeSrc":"4102:117:5","nodeType":"YulIf","src":"4102:117:5"},{"nativeSrc":"4233:88:5","nodeType":"YulAssignment","src":"4233:88:5","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4293:9:5","nodeType":"YulIdentifier","src":"4293:9:5"},{"name":"offset","nativeSrc":"4304:6:5","nodeType":"YulIdentifier","src":"4304:6:5"}],"functionName":{"name":"add","nativeSrc":"4289:3:5","nodeType":"YulIdentifier","src":"4289:3:5"},"nativeSrc":"4289:22:5","nodeType":"YulFunctionCall","src":"4289:22:5"},{"name":"dataEnd","nativeSrc":"4313:7:5","nodeType":"YulIdentifier","src":"4313:7:5"}],"functionName":{"name":"abi_decode_t_array$_t_bytes32_$dyn_memory_ptr","nativeSrc":"4243:45:5","nodeType":"YulIdentifier","src":"4243:45:5"},"nativeSrc":"4243:78:5","nodeType":"YulFunctionCall","src":"4243:78:5"},"variableNames":[{"name":"value0","nativeSrc":"4233:6:5","nodeType":"YulIdentifier","src":"4233:6:5"}]}]},{"nativeSrc":"4341:118:5","nodeType":"YulBlock","src":"4341:118:5","statements":[{"nativeSrc":"4356:16:5","nodeType":"YulVariableDeclaration","src":"4356:16:5","value":{"kind":"number","nativeSrc":"4370:2:5","nodeType":"YulLiteral","src":"4370:2:5","type":"","value":"32"},"variables":[{"name":"offset","nativeSrc":"4360:6:5","nodeType":"YulTypedName","src":"4360:6:5","type":""}]},{"nativeSrc":"4386:63:5","nodeType":"YulAssignment","src":"4386:63:5","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4421:9:5","nodeType":"YulIdentifier","src":"4421:9:5"},{"name":"offset","nativeSrc":"4432:6:5","nodeType":"YulIdentifier","src":"4432:6:5"}],"functionName":{"name":"add","nativeSrc":"4417:3:5","nodeType":"YulIdentifier","src":"4417:3:5"},"nativeSrc":"4417:22:5","nodeType":"YulFunctionCall","src":"4417:22:5"},{"name":"dataEnd","nativeSrc":"4441:7:5","nodeType":"YulIdentifier","src":"4441:7:5"}],"functionName":{"name":"abi_decode_t_bytes32","nativeSrc":"4396:20:5","nodeType":"YulIdentifier","src":"4396:20:5"},"nativeSrc":"4396:53:5","nodeType":"YulFunctionCall","src":"4396:53:5"},"variableNames":[{"name":"value1","nativeSrc":"4386:6:5","nodeType":"YulIdentifier","src":"4386:6:5"}]}]}]},"name":"abi_decode_tuple_t_array$_t_bytes32_$dyn_memory_ptrt_bytes32","nativeSrc":"3782:684:5","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"3852:9:5","nodeType":"YulTypedName","src":"3852:9:5","type":""},{"name":"dataEnd","nativeSrc":"3863:7:5","nodeType":"YulTypedName","src":"3863:7:5","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"3875:6:5","nodeType":"YulTypedName","src":"3875:6:5","type":""},{"name":"value1","nativeSrc":"3883:6:5","nodeType":"YulTypedName","src":"3883:6:5","type":""}],"src":"3782:684:5"},{"body":{"nativeSrc":"4514:48:5","nodeType":"YulBlock","src":"4514:48:5","statements":[{"nativeSrc":"4524:32:5","nodeType":"YulAssignment","src":"4524:32:5","value":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"4549:5:5","nodeType":"YulIdentifier","src":"4549:5:5"}],"functionName":{"name":"iszero","nativeSrc":"4542:6:5","nodeType":"YulIdentifier","src":"4542:6:5"},"nativeSrc":"4542:13:5","nodeType":"YulFunctionCall","src":"4542:13:5"}],"functionName":{"name":"iszero","nativeSrc":"4535:6:5","nodeType":"YulIdentifier","src":"4535:6:5"},"nativeSrc":"4535:21:5","nodeType":"YulFunctionCall","src":"4535:21:5"},"variableNames":[{"name":"cleaned","nativeSrc":"4524:7:5","nodeType":"YulIdentifier","src":"4524:7:5"}]}]},"name":"cleanup_t_bool","nativeSrc":"4472:90:5","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"4496:5:5","nodeType":"YulTypedName","src":"4496:5:5","type":""}],"returnVariables":[{"name":"cleaned","nativeSrc":"4506:7:5","nodeType":"YulTypedName","src":"4506:7:5","type":""}],"src":"4472:90:5"},{"body":{"nativeSrc":"4627:50:5","nodeType":"YulBlock","src":"4627:50:5","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"4644:3:5","nodeType":"YulIdentifier","src":"4644:3:5"},{"arguments":[{"name":"value","nativeSrc":"4664:5:5","nodeType":"YulIdentifier","src":"4664:5:5"}],"functionName":{"name":"cleanup_t_bool","nativeSrc":"4649:14:5","nodeType":"YulIdentifier","src":"4649:14:5"},"nativeSrc":"4649:21:5","nodeType":"YulFunctionCall","src":"4649:21:5"}],"functionName":{"name":"mstore","nativeSrc":"4637:6:5","nodeType":"YulIdentifier","src":"4637:6:5"},"nativeSrc":"4637:34:5","nodeType":"YulFunctionCall","src":"4637:34:5"},"nativeSrc":"4637:34:5","nodeType":"YulExpressionStatement","src":"4637:34:5"}]},"name":"abi_encode_t_bool_to_t_bool_fromStack","nativeSrc":"4568:109:5","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"4615:5:5","nodeType":"YulTypedName","src":"4615:5:5","type":""},{"name":"pos","nativeSrc":"4622:3:5","nodeType":"YulTypedName","src":"4622:3:5","type":""}],"src":"4568:109:5"},{"body":{"nativeSrc":"4775:118:5","nodeType":"YulBlock","src":"4775:118:5","statements":[{"nativeSrc":"4785:26:5","nodeType":"YulAssignment","src":"4785:26:5","value":{"arguments":[{"name":"headStart","nativeSrc":"4797:9:5","nodeType":"YulIdentifier","src":"4797:9:5"},{"kind":"number","nativeSrc":"4808:2:5","nodeType":"YulLiteral","src":"4808:2:5","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"4793:3:5","nodeType":"YulIdentifier","src":"4793:3:5"},"nativeSrc":"4793:18:5","nodeType":"YulFunctionCall","src":"4793:18:5"},"variableNames":[{"name":"tail","nativeSrc":"4785:4:5","nodeType":"YulIdentifier","src":"4785:4:5"}]},{"expression":{"arguments":[{"name":"value0","nativeSrc":"4859:6:5","nodeType":"YulIdentifier","src":"4859:6:5"},{"arguments":[{"name":"headStart","nativeSrc":"4872:9:5","nodeType":"YulIdentifier","src":"4872:9:5"},{"kind":"number","nativeSrc":"4883:1:5","nodeType":"YulLiteral","src":"4883:1:5","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"4868:3:5","nodeType":"YulIdentifier","src":"4868:3:5"},"nativeSrc":"4868:17:5","nodeType":"YulFunctionCall","src":"4868:17:5"}],"functionName":{"name":"abi_encode_t_bool_to_t_bool_fromStack","nativeSrc":"4821:37:5","nodeType":"YulIdentifier","src":"4821:37:5"},"nativeSrc":"4821:65:5","nodeType":"YulFunctionCall","src":"4821:65:5"},"nativeSrc":"4821:65:5","nodeType":"YulExpressionStatement","src":"4821:65:5"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nativeSrc":"4683:210:5","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"4747:9:5","nodeType":"YulTypedName","src":"4747:9:5","type":""},{"name":"value0","nativeSrc":"4759:6:5","nodeType":"YulTypedName","src":"4759:6:5","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"4770:4:5","nodeType":"YulTypedName","src":"4770:4:5","type":""}],"src":"4683:210:5"},{"body":{"nativeSrc":"4944:81:5","nodeType":"YulBlock","src":"4944:81:5","statements":[{"nativeSrc":"4954:65:5","nodeType":"YulAssignment","src":"4954:65:5","value":{"arguments":[{"name":"value","nativeSrc":"4969:5:5","nodeType":"YulIdentifier","src":"4969:5:5"},{"kind":"number","nativeSrc":"4976:42:5","nodeType":"YulLiteral","src":"4976:42:5","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"4965:3:5","nodeType":"YulIdentifier","src":"4965:3:5"},"nativeSrc":"4965:54:5","nodeType":"YulFunctionCall","src":"4965:54:5"},"variableNames":[{"name":"cleaned","nativeSrc":"4954:7:5","nodeType":"YulIdentifier","src":"4954:7:5"}]}]},"name":"cleanup_t_uint160","nativeSrc":"4899:126:5","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"4926:5:5","nodeType":"YulTypedName","src":"4926:5:5","type":""}],"returnVariables":[{"name":"cleaned","nativeSrc":"4936:7:5","nodeType":"YulTypedName","src":"4936:7:5","type":""}],"src":"4899:126:5"},{"body":{"nativeSrc":"5076:51:5","nodeType":"YulBlock","src":"5076:51:5","statements":[{"nativeSrc":"5086:35:5","nodeType":"YulAssignment","src":"5086:35:5","value":{"arguments":[{"name":"value","nativeSrc":"5115:5:5","nodeType":"YulIdentifier","src":"5115:5:5"}],"functionName":{"name":"cleanup_t_uint160","nativeSrc":"5097:17:5","nodeType":"YulIdentifier","src":"5097:17:5"},"nativeSrc":"5097:24:5","nodeType":"YulFunctionCall","src":"5097:24:5"},"variableNames":[{"name":"cleaned","nativeSrc":"5086:7:5","nodeType":"YulIdentifier","src":"5086:7:5"}]}]},"name":"cleanup_t_address","nativeSrc":"5031:96:5","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"5058:5:5","nodeType":"YulTypedName","src":"5058:5:5","type":""}],"returnVariables":[{"name":"cleaned","nativeSrc":"5068:7:5","nodeType":"YulTypedName","src":"5068:7:5","type":""}],"src":"5031:96:5"},{"body":{"nativeSrc":"5198:53:5","nodeType":"YulBlock","src":"5198:53:5","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"5215:3:5","nodeType":"YulIdentifier","src":"5215:3:5"},{"arguments":[{"name":"value","nativeSrc":"5238:5:5","nodeType":"YulIdentifier","src":"5238:5:5"}],"functionName":{"name":"cleanup_t_address","nativeSrc":"5220:17:5","nodeType":"YulIdentifier","src":"5220:17:5"},"nativeSrc":"5220:24:5","nodeType":"YulFunctionCall","src":"5220:24:5"}],"functionName":{"name":"mstore","nativeSrc":"5208:6:5","nodeType":"YulIdentifier","src":"5208:6:5"},"nativeSrc":"5208:37:5","nodeType":"YulFunctionCall","src":"5208:37:5"},"nativeSrc":"5208:37:5","nodeType":"YulExpressionStatement","src":"5208:37:5"}]},"name":"abi_encode_t_address_to_t_address_fromStack","nativeSrc":"5133:118:5","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"5186:5:5","nodeType":"YulTypedName","src":"5186:5:5","type":""},{"name":"pos","nativeSrc":"5193:3:5","nodeType":"YulTypedName","src":"5193:3:5","type":""}],"src":"5133:118:5"},{"body":{"nativeSrc":"5355:124:5","nodeType":"YulBlock","src":"5355:124:5","statements":[{"nativeSrc":"5365:26:5","nodeType":"YulAssignment","src":"5365:26:5","value":{"arguments":[{"name":"headStart","nativeSrc":"5377:9:5","nodeType":"YulIdentifier","src":"5377:9:5"},{"kind":"number","nativeSrc":"5388:2:5","nodeType":"YulLiteral","src":"5388:2:5","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"5373:3:5","nodeType":"YulIdentifier","src":"5373:3:5"},"nativeSrc":"5373:18:5","nodeType":"YulFunctionCall","src":"5373:18:5"},"variableNames":[{"name":"tail","nativeSrc":"5365:4:5","nodeType":"YulIdentifier","src":"5365:4:5"}]},{"expression":{"arguments":[{"name":"value0","nativeSrc":"5445:6:5","nodeType":"YulIdentifier","src":"5445:6:5"},{"arguments":[{"name":"headStart","nativeSrc":"5458:9:5","nodeType":"YulIdentifier","src":"5458:9:5"},{"kind":"number","nativeSrc":"5469:1:5","nodeType":"YulLiteral","src":"5469:1:5","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"5454:3:5","nodeType":"YulIdentifier","src":"5454:3:5"},"nativeSrc":"5454:17:5","nodeType":"YulFunctionCall","src":"5454:17:5"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nativeSrc":"5401:43:5","nodeType":"YulIdentifier","src":"5401:43:5"},"nativeSrc":"5401:71:5","nodeType":"YulFunctionCall","src":"5401:71:5"},"nativeSrc":"5401:71:5","nodeType":"YulExpressionStatement","src":"5401:71:5"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nativeSrc":"5257:222:5","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"5327:9:5","nodeType":"YulTypedName","src":"5327:9:5","type":""},{"name":"value0","nativeSrc":"5339:6:5","nodeType":"YulTypedName","src":"5339:6:5","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"5350:4:5","nodeType":"YulTypedName","src":"5350:4:5","type":""}],"src":"5257:222:5"},{"body":{"nativeSrc":"5528:79:5","nodeType":"YulBlock","src":"5528:79:5","statements":[{"body":{"nativeSrc":"5585:16:5","nodeType":"YulBlock","src":"5585:16:5","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"5594:1:5","nodeType":"YulLiteral","src":"5594:1:5","type":"","value":"0"},{"kind":"number","nativeSrc":"5597:1:5","nodeType":"YulLiteral","src":"5597:1:5","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"5587:6:5","nodeType":"YulIdentifier","src":"5587:6:5"},"nativeSrc":"5587:12:5","nodeType":"YulFunctionCall","src":"5587:12:5"},"nativeSrc":"5587:12:5","nodeType":"YulExpressionStatement","src":"5587:12:5"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"5551:5:5","nodeType":"YulIdentifier","src":"5551:5:5"},{"arguments":[{"name":"value","nativeSrc":"5576:5:5","nodeType":"YulIdentifier","src":"5576:5:5"}],"functionName":{"name":"cleanup_t_address","nativeSrc":"5558:17:5","nodeType":"YulIdentifier","src":"5558:17:5"},"nativeSrc":"5558:24:5","nodeType":"YulFunctionCall","src":"5558:24:5"}],"functionName":{"name":"eq","nativeSrc":"5548:2:5","nodeType":"YulIdentifier","src":"5548:2:5"},"nativeSrc":"5548:35:5","nodeType":"YulFunctionCall","src":"5548:35:5"}],"functionName":{"name":"iszero","nativeSrc":"5541:6:5","nodeType":"YulIdentifier","src":"5541:6:5"},"nativeSrc":"5541:43:5","nodeType":"YulFunctionCall","src":"5541:43:5"},"nativeSrc":"5538:63:5","nodeType":"YulIf","src":"5538:63:5"}]},"name":"validator_revert_t_address","nativeSrc":"5485:122:5","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"5521:5:5","nodeType":"YulTypedName","src":"5521:5:5","type":""}],"src":"5485:122:5"},{"body":{"nativeSrc":"5665:87:5","nodeType":"YulBlock","src":"5665:87:5","statements":[{"nativeSrc":"5675:29:5","nodeType":"YulAssignment","src":"5675:29:5","value":{"arguments":[{"name":"offset","nativeSrc":"5697:6:5","nodeType":"YulIdentifier","src":"5697:6:5"}],"functionName":{"name":"calldataload","nativeSrc":"5684:12:5","nodeType":"YulIdentifier","src":"5684:12:5"},"nativeSrc":"5684:20:5","nodeType":"YulFunctionCall","src":"5684:20:5"},"variableNames":[{"name":"value","nativeSrc":"5675:5:5","nodeType":"YulIdentifier","src":"5675:5:5"}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"5740:5:5","nodeType":"YulIdentifier","src":"5740:5:5"}],"functionName":{"name":"validator_revert_t_address","nativeSrc":"5713:26:5","nodeType":"YulIdentifier","src":"5713:26:5"},"nativeSrc":"5713:33:5","nodeType":"YulFunctionCall","src":"5713:33:5"},"nativeSrc":"5713:33:5","nodeType":"YulExpressionStatement","src":"5713:33:5"}]},"name":"abi_decode_t_address","nativeSrc":"5613:139:5","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"5643:6:5","nodeType":"YulTypedName","src":"5643:6:5","type":""},{"name":"end","nativeSrc":"5651:3:5","nodeType":"YulTypedName","src":"5651:3:5","type":""}],"returnVariables":[{"name":"value","nativeSrc":"5659:5:5","nodeType":"YulTypedName","src":"5659:5:5","type":""}],"src":"5613:139:5"},{"body":{"nativeSrc":"5824:263:5","nodeType":"YulBlock","src":"5824:263:5","statements":[{"body":{"nativeSrc":"5870:83:5","nodeType":"YulBlock","src":"5870:83:5","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nativeSrc":"5872:77:5","nodeType":"YulIdentifier","src":"5872:77:5"},"nativeSrc":"5872:79:5","nodeType":"YulFunctionCall","src":"5872:79:5"},"nativeSrc":"5872:79:5","nodeType":"YulExpressionStatement","src":"5872:79:5"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"5845:7:5","nodeType":"YulIdentifier","src":"5845:7:5"},{"name":"headStart","nativeSrc":"5854:9:5","nodeType":"YulIdentifier","src":"5854:9:5"}],"functionName":{"name":"sub","nativeSrc":"5841:3:5","nodeType":"YulIdentifier","src":"5841:3:5"},"nativeSrc":"5841:23:5","nodeType":"YulFunctionCall","src":"5841:23:5"},{"kind":"number","nativeSrc":"5866:2:5","nodeType":"YulLiteral","src":"5866:2:5","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"5837:3:5","nodeType":"YulIdentifier","src":"5837:3:5"},"nativeSrc":"5837:32:5","nodeType":"YulFunctionCall","src":"5837:32:5"},"nativeSrc":"5834:119:5","nodeType":"YulIf","src":"5834:119:5"},{"nativeSrc":"5963:117:5","nodeType":"YulBlock","src":"5963:117:5","statements":[{"nativeSrc":"5978:15:5","nodeType":"YulVariableDeclaration","src":"5978:15:5","value":{"kind":"number","nativeSrc":"5992:1:5","nodeType":"YulLiteral","src":"5992:1:5","type":"","value":"0"},"variables":[{"name":"offset","nativeSrc":"5982:6:5","nodeType":"YulTypedName","src":"5982:6:5","type":""}]},{"nativeSrc":"6007:63:5","nodeType":"YulAssignment","src":"6007:63:5","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"6042:9:5","nodeType":"YulIdentifier","src":"6042:9:5"},{"name":"offset","nativeSrc":"6053:6:5","nodeType":"YulIdentifier","src":"6053:6:5"}],"functionName":{"name":"add","nativeSrc":"6038:3:5","nodeType":"YulIdentifier","src":"6038:3:5"},"nativeSrc":"6038:22:5","nodeType":"YulFunctionCall","src":"6038:22:5"},{"name":"dataEnd","nativeSrc":"6062:7:5","nodeType":"YulIdentifier","src":"6062:7:5"}],"functionName":{"name":"abi_decode_t_address","nativeSrc":"6017:20:5","nodeType":"YulIdentifier","src":"6017:20:5"},"nativeSrc":"6017:53:5","nodeType":"YulFunctionCall","src":"6017:53:5"},"variableNames":[{"name":"value0","nativeSrc":"6007:6:5","nodeType":"YulIdentifier","src":"6007:6:5"}]}]}]},"name":"abi_decode_tuple_t_address","nativeSrc":"5758:329:5","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"5794:9:5","nodeType":"YulTypedName","src":"5794:9:5","type":""},{"name":"dataEnd","nativeSrc":"5805:7:5","nodeType":"YulTypedName","src":"5805:7:5","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"5817:6:5","nodeType":"YulTypedName","src":"5817:6:5","type":""}],"src":"5758:329:5"},{"body":{"nativeSrc":"6121:152:5","nodeType":"YulBlock","src":"6121:152:5","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"6138:1:5","nodeType":"YulLiteral","src":"6138:1:5","type":"","value":"0"},{"kind":"number","nativeSrc":"6141:77:5","nodeType":"YulLiteral","src":"6141:77:5","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"6131:6:5","nodeType":"YulIdentifier","src":"6131:6:5"},"nativeSrc":"6131:88:5","nodeType":"YulFunctionCall","src":"6131:88:5"},"nativeSrc":"6131:88:5","nodeType":"YulExpressionStatement","src":"6131:88:5"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"6235:1:5","nodeType":"YulLiteral","src":"6235:1:5","type":"","value":"4"},{"kind":"number","nativeSrc":"6238:4:5","nodeType":"YulLiteral","src":"6238:4:5","type":"","value":"0x32"}],"functionName":{"name":"mstore","nativeSrc":"6228:6:5","nodeType":"YulIdentifier","src":"6228:6:5"},"nativeSrc":"6228:15:5","nodeType":"YulFunctionCall","src":"6228:15:5"},"nativeSrc":"6228:15:5","nodeType":"YulExpressionStatement","src":"6228:15:5"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"6259:1:5","nodeType":"YulLiteral","src":"6259:1:5","type":"","value":"0"},{"kind":"number","nativeSrc":"6262:4:5","nodeType":"YulLiteral","src":"6262:4:5","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"6252:6:5","nodeType":"YulIdentifier","src":"6252:6:5"},"nativeSrc":"6252:15:5","nodeType":"YulFunctionCall","src":"6252:15:5"},"nativeSrc":"6252:15:5","nodeType":"YulExpressionStatement","src":"6252:15:5"}]},"name":"panic_error_0x32","nativeSrc":"6093:180:5","nodeType":"YulFunctionDefinition","src":"6093:180:5"}]},"contents":"{\n\n    function cleanup_t_bytes32(value) -> cleaned {\n        cleaned := value\n    }\n\n    function abi_encode_t_bytes32_to_t_bytes32_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bytes32(value))\n    }\n\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function validator_revert_t_bytes32(value) {\n        if iszero(eq(value, cleanup_t_bytes32(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bytes32(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bytes32(value)\n    }\n\n    function abi_decode_tuple_t_bytes32(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() {\n        revert(0, 0)\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function finalize_allocation(memPtr, size) {\n        let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))\n        // protect against overflow\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n\n    function allocate_memory(size) -> memPtr {\n        memPtr := allocate_unbounded()\n        finalize_allocation(memPtr, size)\n    }\n\n    function array_allocation_size_t_array$_t_bytes32_$dyn_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := mul(length, 0x20)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef() {\n        revert(0, 0)\n    }\n\n    // bytes32[]\n    function abi_decode_available_length_t_array$_t_bytes32_$dyn_memory_ptr(offset, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_array$_t_bytes32_$dyn_memory_ptr(length))\n        let dst := array\n\n        mstore(array, length)\n        dst := add(array, 0x20)\n\n        let srcEnd := add(offset, mul(length, 0x20))\n        if gt(srcEnd, end) {\n            revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef()\n        }\n        for { let src := offset } lt(src, srcEnd) { src := add(src, 0x20) }\n        {\n\n            let elementPos := src\n\n            mstore(dst, abi_decode_t_bytes32(elementPos, end))\n            dst := add(dst, 0x20)\n        }\n    }\n\n    // bytes32[]\n    function abi_decode_t_array$_t_bytes32_$dyn_memory_ptr(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        let length := calldataload(offset)\n        array := abi_decode_available_length_t_array$_t_bytes32_$dyn_memory_ptr(add(offset, 0x20), length, end)\n    }\n\n    function abi_decode_tuple_t_array$_t_bytes32_$dyn_memory_ptrt_bytes32(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := calldataload(add(headStart, 0))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value0 := abi_decode_t_array$_t_bytes32_$dyn_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n    function abi_encode_t_bool_to_t_bool_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bool_to_t_bool_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function panic_error_0x32() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n\n}\n","id":5,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106100625760003560e01c80632eb4a7ab14610067578063715018a6146100855780637cb647591461008f578063896f2887146100ab5780638da5cb5b146100db578063f2fde38b146100f9575b600080fd5b61006f610115565b60405161007c919061041c565b60405180910390f35b61008d61011b565b005b6100a960048036038101906100a49190610477565b61012f565b005b6100c560048036038101906100c091906105fd565b610141565b6040516100d29190610674565b60405180910390f35b6100e3610158565b6040516100f091906106d0565b60405180910390f35b610113600480360381019061010e9190610717565b610181565b005b60015481565b610123610207565b61012d600061028e565b565b610137610207565b8060018190555050565b60006101508360015484610352565b905092915050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610189610207565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036101fb5760006040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016101f291906106d0565b60405180910390fd5b6102048161028e565b50565b61020f610369565b73ffffffffffffffffffffffffffffffffffffffff1661022d610158565b73ffffffffffffffffffffffffffffffffffffffff161461028c57610250610369565b6040517f118cdaa700000000000000000000000000000000000000000000000000000000815260040161028391906106d0565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60008261035f8584610371565b1490509392505050565b600033905090565b60008082905060005b84518110156103b6576103a78286838151811061039a57610399610744565b5b60200260200101516103c1565b9150808060010191505061037a565b508091505092915050565b60008183106103d9576103d482846103ec565b6103e4565b6103e383836103ec565b5b905092915050565b600082600052816020526040600020905092915050565b6000819050919050565b61041681610403565b82525050565b6000602082019050610431600083018461040d565b92915050565b6000604051905090565b600080fd5b600080fd5b61045481610403565b811461045f57600080fd5b50565b6000813590506104718161044b565b92915050565b60006020828403121561048d5761048c610441565b5b600061049b84828501610462565b91505092915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6104f2826104a9565b810181811067ffffffffffffffff82111715610511576105106104ba565b5b80604052505050565b6000610524610437565b905061053082826104e9565b919050565b600067ffffffffffffffff8211156105505761054f6104ba565b5b602082029050602081019050919050565b600080fd5b600061057961057484610535565b61051a565b9050808382526020820190506020840283018581111561059c5761059b610561565b5b835b818110156105c557806105b18882610462565b84526020840193505060208101905061059e565b5050509392505050565b600082601f8301126105e4576105e36104a4565b5b81356105f4848260208601610566565b91505092915050565b6000806040838503121561061457610613610441565b5b600083013567ffffffffffffffff81111561063257610631610446565b5b61063e858286016105cf565b925050602061064f85828601610462565b9150509250929050565b60008115159050919050565b61066e81610659565b82525050565b60006020820190506106896000830184610665565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006106ba8261068f565b9050919050565b6106ca816106af565b82525050565b60006020820190506106e560008301846106c1565b92915050565b6106f4816106af565b81146106ff57600080fd5b50565b600081359050610711816106eb565b92915050565b60006020828403121561072d5761072c610441565b5b600061073b84828501610702565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fdfea26469706673582212202b417ff5b51626186c7ac2cb19f11c9ac16d173fc0ec1827a40ad6c74155ce8264736f6c634300081b0033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x62 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x2EB4A7AB EQ PUSH2 0x67 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x85 JUMPI DUP1 PUSH4 0x7CB64759 EQ PUSH2 0x8F JUMPI DUP1 PUSH4 0x896F2887 EQ PUSH2 0xAB JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0xDB JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0xF9 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x6F PUSH2 0x115 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x7C SWAP2 SWAP1 PUSH2 0x41C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x8D PUSH2 0x11B JUMP JUMPDEST STOP JUMPDEST PUSH2 0xA9 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xA4 SWAP2 SWAP1 PUSH2 0x477 JUMP JUMPDEST PUSH2 0x12F JUMP JUMPDEST STOP JUMPDEST PUSH2 0xC5 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xC0 SWAP2 SWAP1 PUSH2 0x5FD JUMP JUMPDEST PUSH2 0x141 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xD2 SWAP2 SWAP1 PUSH2 0x674 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xE3 PUSH2 0x158 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xF0 SWAP2 SWAP1 PUSH2 0x6D0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x113 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x10E SWAP2 SWAP1 PUSH2 0x717 JUMP JUMPDEST PUSH2 0x181 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x1 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x123 PUSH2 0x207 JUMP JUMPDEST PUSH2 0x12D PUSH1 0x0 PUSH2 0x28E JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x137 PUSH2 0x207 JUMP JUMPDEST DUP1 PUSH1 0x1 DUP2 SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x150 DUP4 PUSH1 0x1 SLOAD DUP5 PUSH2 0x352 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x189 PUSH2 0x207 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1FB JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0x1E4FBDF700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1F2 SWAP2 SWAP1 PUSH2 0x6D0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x204 DUP2 PUSH2 0x28E JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x20F PUSH2 0x369 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x22D PUSH2 0x158 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x28C JUMPI PUSH2 0x250 PUSH2 0x369 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x118CDAA700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x283 SWAP2 SWAP1 PUSH2 0x6D0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x35F DUP6 DUP5 PUSH2 0x371 JUMP JUMPDEST EQ SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 SWAP1 POP PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x3B6 JUMPI PUSH2 0x3A7 DUP3 DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x39A JUMPI PUSH2 0x399 PUSH2 0x744 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x3C1 JUMP JUMPDEST SWAP2 POP DUP1 DUP1 PUSH1 0x1 ADD SWAP2 POP POP PUSH2 0x37A JUMP JUMPDEST POP DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 LT PUSH2 0x3D9 JUMPI PUSH2 0x3D4 DUP3 DUP5 PUSH2 0x3EC JUMP JUMPDEST PUSH2 0x3E4 JUMP JUMPDEST PUSH2 0x3E3 DUP4 DUP4 PUSH2 0x3EC JUMP JUMPDEST JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x0 MSTORE DUP2 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x416 DUP2 PUSH2 0x403 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x431 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x40D JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x454 DUP2 PUSH2 0x403 JUMP JUMPDEST DUP2 EQ PUSH2 0x45F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x471 DUP2 PUSH2 0x44B JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x48D JUMPI PUSH2 0x48C PUSH2 0x441 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x49B DUP5 DUP3 DUP6 ADD PUSH2 0x462 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x4F2 DUP3 PUSH2 0x4A9 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x511 JUMPI PUSH2 0x510 PUSH2 0x4BA JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x524 PUSH2 0x437 JUMP JUMPDEST SWAP1 POP PUSH2 0x530 DUP3 DUP3 PUSH2 0x4E9 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x550 JUMPI PUSH2 0x54F PUSH2 0x4BA JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP3 MUL SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x579 PUSH2 0x574 DUP5 PUSH2 0x535 JUMP JUMPDEST PUSH2 0x51A JUMP JUMPDEST SWAP1 POP DUP1 DUP4 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH1 0x20 DUP5 MUL DUP4 ADD DUP6 DUP2 GT ISZERO PUSH2 0x59C JUMPI PUSH2 0x59B PUSH2 0x561 JUMP JUMPDEST JUMPDEST DUP4 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x5C5 JUMPI DUP1 PUSH2 0x5B1 DUP9 DUP3 PUSH2 0x462 JUMP JUMPDEST DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x59E JUMP JUMPDEST POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x5E4 JUMPI PUSH2 0x5E3 PUSH2 0x4A4 JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x5F4 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x566 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x614 JUMPI PUSH2 0x613 PUSH2 0x441 JUMP JUMPDEST JUMPDEST PUSH1 0x0 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x632 JUMPI PUSH2 0x631 PUSH2 0x446 JUMP JUMPDEST JUMPDEST PUSH2 0x63E DUP6 DUP3 DUP7 ADD PUSH2 0x5CF JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x64F DUP6 DUP3 DUP7 ADD PUSH2 0x462 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x66E DUP2 PUSH2 0x659 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x689 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x665 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x6BA DUP3 PUSH2 0x68F JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x6CA DUP2 PUSH2 0x6AF JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x6E5 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x6C1 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x6F4 DUP2 PUSH2 0x6AF JUMP JUMPDEST DUP2 EQ PUSH2 0x6FF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x711 DUP2 PUSH2 0x6EB JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x72D JUMPI PUSH2 0x72C PUSH2 0x441 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x73B DUP5 DUP3 DUP6 ADD PUSH2 0x702 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x2B COINBASE PUSH32 0xF5B51626186C7AC2CB19F11C9AC16D173FC0EC1827A40AD6C74155CE8264736F PUSH13 0x634300081B0033000000000000 ","sourceMap":"187:848:4:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;280:25;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2293:101:0;;;:::i;:::-;;557:104:4;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;745:287;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1638:85:0;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2543:215;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;280:25:4;;;;:::o;2293:101:0:-;1531:13;:11;:13::i;:::-;2357:30:::1;2384:1;2357:18;:30::i;:::-;2293:101::o:0;557:104:4:-;1531:13:0;:11;:13::i;:::-;642:11:4::1;629:10;:24;;;;557:104:::0;:::o;745:287::-;957:4;981:43;1000:5;1007:10;;1019:4;981:18;:43::i;:::-;974:50;;745:287;;;;:::o;1638:85:0:-;1684:7;1710:6;;;;;;;;;;;1703:13;;1638:85;:::o;2543:215::-;1531:13;:11;:13::i;:::-;2647:1:::1;2627:22;;:8;:22;;::::0;2623:91:::1;;2700:1;2672:31;;;;;;;;;;;:::i;:::-;;;;;;;;2623:91;2723:28;2742:8;2723:18;:28::i;:::-;2543:215:::0;:::o;1796:162::-;1866:12;:10;:12::i;:::-;1855:23;;:7;:5;:7::i;:::-;:23;;;1851:101;;1928:12;:10;:12::i;:::-;1901:40;;;;;;;;;;;:::i;:::-;;;;;;;;1851:101;1796:162::o;2912:187::-;2985:16;3004:6;;;;;;;;;;;2985:25;;3029:8;3020:6;;:17;;;;;;;;;;;;;;;;;;3083:8;3052:40;;3073:8;3052:40;;;;;;;;;;;;2975:124;2912:187;:::o;1902:154:3:-;1993:4;2045;2016:25;2029:5;2036:4;2016:12;:25::i;:::-;:33;2009:40;;1902:154;;;;;:::o;656:96:1:-;709:7;735:10;728:17;;656:96;:::o;2457:308:3:-;2540:7;2559:20;2582:4;2559:27;;2601:9;2596:134;2620:5;:12;2616:1;:16;2596:134;;;2668:51;2696:12;2710:5;2716:1;2710:8;;;;;;;;:::i;:::-;;;;;;;;2668:27;:51::i;:::-;2653:66;;2634:3;;;;;;;2596:134;;;;2746:12;2739:19;;;2457:308;;;;:::o;504:169:2:-;579:7;609:1;605;:5;:61;;641:25;661:1;664;641:19;:25::i;:::-;605:61;;;613:25;633:1;636;613:19;:25::i;:::-;605:61;598:68;;504:169;;;;:::o;793:239::-;866:13;943:1;937:4;930:15;971:1;965:4;958:15;1011:4;1005;995:21;986:30;;793:239;;;;:::o;7:77:5:-;44:7;73:5;62:16;;7:77;;;:::o;90:118::-;177:24;195:5;177:24;:::i;:::-;172:3;165:37;90:118;;:::o;214:222::-;307:4;345:2;334:9;330:18;322:26;;358:71;426:1;415:9;411:17;402:6;358:71;:::i;:::-;214:222;;;;:::o;442:75::-;475:6;508:2;502:9;492:19;;442:75;:::o;523:117::-;632:1;629;622:12;646:117;755:1;752;745:12;769:122;842:24;860:5;842:24;:::i;:::-;835:5;832:35;822:63;;881:1;878;871:12;822:63;769:122;:::o;897:139::-;943:5;981:6;968:20;959:29;;997:33;1024:5;997:33;:::i;:::-;897:139;;;;:::o;1042:329::-;1101:6;1150:2;1138:9;1129:7;1125:23;1121:32;1118:119;;;1156:79;;:::i;:::-;1118:119;1276:1;1301:53;1346:7;1337:6;1326:9;1322:22;1301:53;:::i;:::-;1291:63;;1247:117;1042:329;;;;:::o;1377:117::-;1486:1;1483;1476:12;1500:102;1541:6;1592:2;1588:7;1583:2;1576:5;1572:14;1568:28;1558:38;;1500:102;;;:::o;1608:180::-;1656:77;1653:1;1646:88;1753:4;1750:1;1743:15;1777:4;1774:1;1767:15;1794:281;1877:27;1899:4;1877:27;:::i;:::-;1869:6;1865:40;2007:6;1995:10;1992:22;1971:18;1959:10;1956:34;1953:62;1950:88;;;2018:18;;:::i;:::-;1950:88;2058:10;2054:2;2047:22;1837:238;1794:281;;:::o;2081:129::-;2115:6;2142:20;;:::i;:::-;2132:30;;2171:33;2199:4;2191:6;2171:33;:::i;:::-;2081:129;;;:::o;2216:311::-;2293:4;2383:18;2375:6;2372:30;2369:56;;;2405:18;;:::i;:::-;2369:56;2455:4;2447:6;2443:17;2435:25;;2515:4;2509;2505:15;2497:23;;2216:311;;;:::o;2533:117::-;2642:1;2639;2632:12;2673:710;2769:5;2794:81;2810:64;2867:6;2810:64;:::i;:::-;2794:81;:::i;:::-;2785:90;;2895:5;2924:6;2917:5;2910:21;2958:4;2951:5;2947:16;2940:23;;3011:4;3003:6;2999:17;2991:6;2987:30;3040:3;3032:6;3029:15;3026:122;;;3059:79;;:::i;:::-;3026:122;3174:6;3157:220;3191:6;3186:3;3183:15;3157:220;;;3266:3;3295:37;3328:3;3316:10;3295:37;:::i;:::-;3290:3;3283:50;3362:4;3357:3;3353:14;3346:21;;3233:144;3217:4;3212:3;3208:14;3201:21;;3157:220;;;3161:21;2775:608;;2673:710;;;;;:::o;3406:370::-;3477:5;3526:3;3519:4;3511:6;3507:17;3503:27;3493:122;;3534:79;;:::i;:::-;3493:122;3651:6;3638:20;3676:94;3766:3;3758:6;3751:4;3743:6;3739:17;3676:94;:::i;:::-;3667:103;;3483:293;3406:370;;;;:::o;3782:684::-;3875:6;3883;3932:2;3920:9;3911:7;3907:23;3903:32;3900:119;;;3938:79;;:::i;:::-;3900:119;4086:1;4075:9;4071:17;4058:31;4116:18;4108:6;4105:30;4102:117;;;4138:79;;:::i;:::-;4102:117;4243:78;4313:7;4304:6;4293:9;4289:22;4243:78;:::i;:::-;4233:88;;4029:302;4370:2;4396:53;4441:7;4432:6;4421:9;4417:22;4396:53;:::i;:::-;4386:63;;4341:118;3782:684;;;;;:::o;4472:90::-;4506:7;4549:5;4542:13;4535:21;4524:32;;4472:90;;;:::o;4568:109::-;4649:21;4664:5;4649:21;:::i;:::-;4644:3;4637:34;4568:109;;:::o;4683:210::-;4770:4;4808:2;4797:9;4793:18;4785:26;;4821:65;4883:1;4872:9;4868:17;4859:6;4821:65;:::i;:::-;4683:210;;;;:::o;4899:126::-;4936:7;4976:42;4969:5;4965:54;4954:65;;4899:126;;;:::o;5031:96::-;5068:7;5097:24;5115:5;5097:24;:::i;:::-;5086:35;;5031:96;;;:::o;5133:118::-;5220:24;5238:5;5220:24;:::i;:::-;5215:3;5208:37;5133:118;;:::o;5257:222::-;5350:4;5388:2;5377:9;5373:18;5365:26;;5401:71;5469:1;5458:9;5454:17;5445:6;5401:71;:::i;:::-;5257:222;;;;:::o;5485:122::-;5558:24;5576:5;5558:24;:::i;:::-;5551:5;5548:35;5538:63;;5597:1;5594;5587:12;5538:63;5485:122;:::o;5613:139::-;5659:5;5697:6;5684:20;5675:29;;5713:33;5740:5;5713:33;:::i;:::-;5613:139;;;;:::o;5758:329::-;5817:6;5866:2;5854:9;5845:7;5841:23;5837:32;5834:119;;;5872:79;;:::i;:::-;5834:119;5992:1;6017:53;6062:7;6053:6;6042:9;6038:22;6017:53;:::i;:::-;6007:63;;5963:117;5758:329;;;;:::o;6093:180::-;6141:77;6138:1;6131:88;6238:4;6235:1;6228:15;6262:4;6259:1;6252:15"},"methodIdentifiers":{"merkleRoot()":"2eb4a7ab","owner()":"8da5cb5b","renounceOwnership()":"715018a6","setMerkleRoot(bytes32)":"7cb64759","transferOwnership(address)":"f2fde38b","verifyTransactionInclusion(bytes32[],bytes32)":"896f2887"}},"metadata":"{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"merkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_merkleRoot\",\"type\":\"bytes32\"}],\"name\":\"setMerkleRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32\",\"name\":\"leaf\",\"type\":\"bytes32\"}],\"name\":\"verifyTransactionInclusion\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MerkleProofVerification.sol\":\"MerkleProofVerification\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8ed324d3920bb545059d66ab97d43e43ee85fd3bd52e03e401f020afb0b120f6\",\"dweb:/ipfs/QmfEckWLmZkDDcoWrkEvMWhms66xwTLff9DDhegYpvHo1a\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]},\"@openzeppelin/contracts/utils/cryptography/Hashes.sol\":{\"keccak256\":\"0x631dc1958d5308bd2d9f91190bbcde4f9ffb9d9401ce8d358c17b35f1a942bb7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e7ef16d9a6f57eae9ab275116eaba1e8de70efd3d0e3682b1585b8f069d9c3f9\",\"dweb:/ipfs/QmR3JQHAyv4sNWnRHeiC6oaz8Bqn8rtzu5sdAqAJRtBqpj\"]},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"keccak256\":\"0x36a0c409c437a753cac9b92b75f93b0fbe92803bf2c8ff1517e54b247f166134\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0f91ba472de411aa557cdbf6560c40750d87bd11c9060bc04d2ba7119af9d5a6\",\"dweb:/ipfs/QmQjtYo2i7dDvzCEzZ67bDoNSG4RrwMoxPWuqFmX5Xzpuw\"]},\"contracts/MerkleProofVerification.sol\":{\"keccak256\":\"0x2be9808e1e3ea76d0b44b126512ff0d139124aae666d676ba7db72e3b463b479\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://13afd469f7276638096b492534b700e63316744f0720e8a498b5659e6dc801ea\",\"dweb:/ipfs/QmTc7Vf151thvJj1fmZ5WcFHDnEMNvRwCYH3B9PWPD76T3\"]}},\"version\":1}"}}}}}